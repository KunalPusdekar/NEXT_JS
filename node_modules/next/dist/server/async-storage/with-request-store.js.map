{"version":3,"sources":["../../../src/server/async-storage/with-request-store.ts"],"sourcesContent":["import type { BaseNextRequest, BaseNextResponse } from '../base-http'\nimport type { IncomingHttpHeaders } from 'http'\nimport type { AsyncLocalStorage } from 'async_hooks'\nimport type {\n  RequestStore,\n  WorkUnitStore,\n} from '../app-render/work-unit-async-storage.external'\nimport type { RenderOpts } from '../app-render/types'\nimport type { WithStore } from './with-store'\nimport type { NextRequest } from '../web/spec-extension/request'\nimport type { __ApiPreviewProps } from '../api-utils'\n\nimport { FLIGHT_HEADERS } from '../../client/components/app-router-headers'\nimport {\n  HeadersAdapter,\n  type ReadonlyHeaders,\n} from '../web/spec-extension/adapters/headers'\nimport {\n  MutableRequestCookiesAdapter,\n  RequestCookiesAdapter,\n  type ReadonlyRequestCookies,\n} from '../web/spec-extension/adapters/request-cookies'\nimport { ResponseCookies, RequestCookies } from '../web/spec-extension/cookies'\nimport { DraftModeProvider } from './draft-mode-provider'\nimport { splitCookiesString } from '../web/utils'\nimport type { ServerComponentsHmrCache } from '../response-cache'\n\nfunction getHeaders(headers: Headers | IncomingHttpHeaders): ReadonlyHeaders {\n  const cleaned = HeadersAdapter.from(headers)\n  for (const header of FLIGHT_HEADERS) {\n    cleaned.delete(header.toLowerCase())\n  }\n\n  return HeadersAdapter.seal(cleaned)\n}\n\nfunction getMutableCookies(\n  headers: Headers | IncomingHttpHeaders,\n  onUpdateCookies?: (cookies: string[]) => void\n): ResponseCookies {\n  const cookies = new RequestCookies(HeadersAdapter.from(headers))\n  return MutableRequestCookiesAdapter.wrap(cookies, onUpdateCookies)\n}\n\nexport type WrapperRenderOpts = Partial<Pick<RenderOpts, 'onUpdateCookies'>> & {\n  previewProps?: __ApiPreviewProps\n}\n\nexport type RequestContext = RequestResponsePair & {\n  /**\n   * The URL of the request. This only specifies the pathname and the search\n   * part of the URL. This is only undefined when generating static paths (ie,\n   * there is no request in progress, nor do we know one).\n   */\n  url: {\n    /**\n     * The pathname of the requested URL.\n     */\n    pathname: string\n\n    /**\n     * The search part of the requested URL. If the request did not provide a\n     * search part, this will be an empty string.\n     */\n    search?: string\n  }\n  phase: RequestStore['phase']\n  renderOpts?: WrapperRenderOpts\n  isHmrRefresh?: boolean\n  serverComponentsHmrCache?: ServerComponentsHmrCache\n  implicitTags?: string[] | undefined\n}\n\ntype RequestResponsePair =\n  | { req: BaseNextRequest; res: BaseNextResponse } // for an app page\n  | { req: NextRequest; res: undefined } // in an api route or middleware\n\n/**\n * If middleware set cookies in this request (indicated by `x-middleware-set-cookie`),\n * then merge those into the existing cookie object, so that when `cookies()` is accessed\n * it's able to read the newly set cookies.\n */\nfunction mergeMiddlewareCookies(\n  req: RequestContext['req'],\n  existingCookies: RequestCookies | ResponseCookies\n) {\n  if (\n    'x-middleware-set-cookie' in req.headers &&\n    typeof req.headers['x-middleware-set-cookie'] === 'string'\n  ) {\n    const setCookieValue = req.headers['x-middleware-set-cookie']\n    const responseHeaders = new Headers()\n\n    for (const cookie of splitCookiesString(setCookieValue)) {\n      responseHeaders.append('set-cookie', cookie)\n    }\n\n    const responseCookies = new ResponseCookies(responseHeaders)\n\n    // Transfer cookies from ResponseCookies to RequestCookies\n    for (const cookie of responseCookies.getAll()) {\n      existingCookies.set(cookie)\n    }\n  }\n}\n\nexport const withRequestStore: WithStore<WorkUnitStore, RequestContext> = <\n  Result,\n>(\n  storage: AsyncLocalStorage<WorkUnitStore>,\n  {\n    req,\n    url,\n    res,\n    phase,\n    renderOpts,\n    isHmrRefresh,\n    serverComponentsHmrCache,\n    implicitTags,\n  }: RequestContext,\n  callback: (store: RequestStore) => Result\n): Result => {\n  function defaultOnUpdateCookies(cookies: string[]) {\n    if (res) {\n      res.setHeader('Set-Cookie', cookies)\n    }\n  }\n\n  const cache: {\n    headers?: ReadonlyHeaders\n    cookies?: ReadonlyRequestCookies\n    mutableCookies?: ResponseCookies\n    draftMode?: DraftModeProvider\n  } = {}\n\n  const store: RequestStore = {\n    type: 'request',\n    phase,\n    implicitTags: implicitTags ?? [],\n    // Rather than just using the whole `url` here, we pull the parts we want\n    // to ensure we don't use parts of the URL that we shouldn't. This also\n    // lets us avoid requiring an empty string for `search` in the type.\n    url: { pathname: url.pathname, search: url.search ?? '' },\n    get headers() {\n      if (!cache.headers) {\n        // Seal the headers object that'll freeze out any methods that could\n        // mutate the underlying data.\n        cache.headers = getHeaders(req.headers)\n      }\n\n      return cache.headers\n    },\n    get cookies() {\n      if (!cache.cookies) {\n        // if middleware is setting cookie(s), then include those in\n        // the initial cached cookies so they can be read in render\n        const requestCookies = new RequestCookies(\n          HeadersAdapter.from(req.headers)\n        )\n\n        mergeMiddlewareCookies(req, requestCookies)\n\n        // Seal the cookies object that'll freeze out any methods that could\n        // mutate the underlying data.\n        cache.cookies = RequestCookiesAdapter.seal(requestCookies)\n      }\n\n      return cache.cookies\n    },\n    get mutableCookies() {\n      if (!cache.mutableCookies) {\n        const mutableCookies = getMutableCookies(\n          req.headers,\n          renderOpts?.onUpdateCookies ||\n            (res ? defaultOnUpdateCookies : undefined)\n        )\n\n        mergeMiddlewareCookies(req, mutableCookies)\n\n        cache.mutableCookies = mutableCookies\n      }\n      return cache.mutableCookies\n    },\n    get draftMode() {\n      if (!cache.draftMode) {\n        cache.draftMode = new DraftModeProvider(\n          renderOpts?.previewProps,\n          req,\n          this.cookies,\n          this.mutableCookies\n        )\n      }\n\n      return cache.draftMode\n    },\n\n    isHmrRefresh,\n    serverComponentsHmrCache:\n      serverComponentsHmrCache ||\n      (globalThis as any).__serverComponentsHmrCache,\n  }\n\n  return storage.run(store, callback, store)\n}\n"],"names":["withRequestStore","getHeaders","headers","cleaned","HeadersAdapter","from","header","FLIGHT_HEADERS","delete","toLowerCase","seal","getMutableCookies","onUpdateCookies","cookies","RequestCookies","MutableRequestCookiesAdapter","wrap","mergeMiddlewareCookies","req","existingCookies","setCookieValue","responseHeaders","Headers","cookie","splitCookiesString","append","responseCookies","ResponseCookies","getAll","set","storage","url","res","phase","renderOpts","isHmrRefresh","serverComponentsHmrCache","implicitTags","callback","defaultOnUpdateCookies","setHeader","cache","store","type","pathname","search","requestCookies","RequestCookiesAdapter","mutableCookies","undefined","draftMode","DraftModeProvider","previewProps","globalThis","__serverComponentsHmrCache","run"],"mappings":";;;;+BA0GaA;;;eAAAA;;;kCA9FkB;yBAIxB;gCAKA;yBACyC;mCACd;uBACC;AAGnC,SAASC,WAAWC,OAAsC;IACxD,MAAMC,UAAUC,uBAAc,CAACC,IAAI,CAACH;IACpC,KAAK,MAAMI,UAAUC,gCAAc,CAAE;QACnCJ,QAAQK,MAAM,CAACF,OAAOG,WAAW;IACnC;IAEA,OAAOL,uBAAc,CAACM,IAAI,CAACP;AAC7B;AAEA,SAASQ,kBACPT,OAAsC,EACtCU,eAA6C;IAE7C,MAAMC,UAAU,IAAIC,uBAAc,CAACV,uBAAc,CAACC,IAAI,CAACH;IACvD,OAAOa,4CAA4B,CAACC,IAAI,CAACH,SAASD;AACpD;AAmCA;;;;CAIC,GACD,SAASK,uBACPC,GAA0B,EAC1BC,eAAiD;IAEjD,IACE,6BAA6BD,IAAIhB,OAAO,IACxC,OAAOgB,IAAIhB,OAAO,CAAC,0BAA0B,KAAK,UAClD;QACA,MAAMkB,iBAAiBF,IAAIhB,OAAO,CAAC,0BAA0B;QAC7D,MAAMmB,kBAAkB,IAAIC;QAE5B,KAAK,MAAMC,UAAUC,IAAAA,yBAAkB,EAACJ,gBAAiB;YACvDC,gBAAgBI,MAAM,CAAC,cAAcF;QACvC;QAEA,MAAMG,kBAAkB,IAAIC,wBAAe,CAACN;QAE5C,0DAA0D;QAC1D,KAAK,MAAME,UAAUG,gBAAgBE,MAAM,GAAI;YAC7CT,gBAAgBU,GAAG,CAACN;QACtB;IACF;AACF;AAEO,MAAMvB,mBAA6D,CAGxE8B,SACA,EACEZ,GAAG,EACHa,GAAG,EACHC,GAAG,EACHC,KAAK,EACLC,UAAU,EACVC,YAAY,EACZC,wBAAwB,EACxBC,YAAY,EACG,EACjBC;IAEA,SAASC,uBAAuB1B,OAAiB;QAC/C,IAAImB,KAAK;YACPA,IAAIQ,SAAS,CAAC,cAAc3B;QAC9B;IACF;IAEA,MAAM4B,QAKF,CAAC;IAEL,MAAMC,QAAsB;QAC1BC,MAAM;QACNV;QACAI,cAAcA,gBAAgB,EAAE;QAChC,yEAAyE;QACzE,uEAAuE;QACvE,oEAAoE;QACpEN,KAAK;YAAEa,UAAUb,IAAIa,QAAQ;YAAEC,QAAQd,IAAIc,MAAM,IAAI;QAAG;QACxD,IAAI3C,WAAU;YACZ,IAAI,CAACuC,MAAMvC,OAAO,EAAE;gBAClB,oEAAoE;gBACpE,8BAA8B;gBAC9BuC,MAAMvC,OAAO,GAAGD,WAAWiB,IAAIhB,OAAO;YACxC;YAEA,OAAOuC,MAAMvC,OAAO;QACtB;QACA,IAAIW,WAAU;YACZ,IAAI,CAAC4B,MAAM5B,OAAO,EAAE;gBAClB,4DAA4D;gBAC5D,2DAA2D;gBAC3D,MAAMiC,iBAAiB,IAAIhC,uBAAc,CACvCV,uBAAc,CAACC,IAAI,CAACa,IAAIhB,OAAO;gBAGjCe,uBAAuBC,KAAK4B;gBAE5B,oEAAoE;gBACpE,8BAA8B;gBAC9BL,MAAM5B,OAAO,GAAGkC,qCAAqB,CAACrC,IAAI,CAACoC;YAC7C;YAEA,OAAOL,MAAM5B,OAAO;QACtB;QACA,IAAImC,kBAAiB;YACnB,IAAI,CAACP,MAAMO,cAAc,EAAE;gBACzB,MAAMA,iBAAiBrC,kBACrBO,IAAIhB,OAAO,EACXgC,CAAAA,8BAAAA,WAAYtB,eAAe,KACxBoB,CAAAA,MAAMO,yBAAyBU,SAAQ;gBAG5ChC,uBAAuBC,KAAK8B;gBAE5BP,MAAMO,cAAc,GAAGA;YACzB;YACA,OAAOP,MAAMO,cAAc;QAC7B;QACA,IAAIE,aAAY;YACd,IAAI,CAACT,MAAMS,SAAS,EAAE;gBACpBT,MAAMS,SAAS,GAAG,IAAIC,oCAAiB,CACrCjB,8BAAAA,WAAYkB,YAAY,EACxBlC,KACA,IAAI,CAACL,OAAO,EACZ,IAAI,CAACmC,cAAc;YAEvB;YAEA,OAAOP,MAAMS,SAAS;QACxB;QAEAf;QACAC,0BACEA,4BACA,AAACiB,WAAmBC,0BAA0B;IAClD;IAEA,OAAOxB,QAAQyB,GAAG,CAACb,OAAOJ,UAAUI;AACtC"}