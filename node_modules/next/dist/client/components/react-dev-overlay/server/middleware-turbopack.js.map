{"version":3,"sources":["../../../../../src/client/components/react-dev-overlay/server/middleware-turbopack.ts"],"sourcesContent":["import type { IncomingMessage, ServerResponse } from 'http'\nimport {\n  badRequest,\n  findSourcePackage,\n  getOriginalCodeFrame,\n  internalServerError,\n  json,\n  noContent,\n  type OriginalStackFrameResponse,\n} from './shared'\n\nimport fs, { constants as FS } from 'fs/promises'\nimport { launchEditor } from '../internal/helpers/launchEditor'\nimport type { StackFrame } from 'next/dist/compiled/stacktrace-parser'\nimport type { Project, TurbopackStackFrame } from '../../../../build/swc/types'\n\nconst currentSourcesByFile: Map<string, Promise<string | null>> = new Map()\nexport async function batchedTraceSource(\n  project: Project,\n  frame: TurbopackStackFrame\n): Promise<{ frame: StackFrame; source: string | null } | undefined> {\n  const file = frame.file ? decodeURIComponent(frame.file) : undefined\n  if (!file) return\n\n  const sourceFrame = await project.traceSource(frame)\n  if (!sourceFrame) return\n\n  let source = null\n  // Don't look up source for node_modules or internals. These can often be large bundled files.\n  if (\n    sourceFrame.file &&\n    !(sourceFrame.file.includes('node_modules') || sourceFrame.isInternal)\n  ) {\n    let sourcePromise = currentSourcesByFile.get(sourceFrame.file)\n    if (!sourcePromise) {\n      sourcePromise = project.getSourceForAsset(sourceFrame.file)\n      currentSourcesByFile.set(sourceFrame.file, sourcePromise)\n      setTimeout(() => {\n        // Cache file reads for 100ms, as frames will often reference the same\n        // files and can be large.\n        currentSourcesByFile.delete(sourceFrame.file!)\n      }, 100)\n    }\n\n    source = await sourcePromise\n  }\n\n  return {\n    frame: {\n      file: sourceFrame.file,\n      lineNumber: sourceFrame.line ?? 0,\n      column: sourceFrame.column ?? 0,\n      methodName: sourceFrame.methodName ?? frame.methodName ?? '<unknown>',\n      arguments: [],\n    },\n    source,\n  }\n}\n\nexport async function createOriginalStackFrame(\n  project: Project,\n  frame: TurbopackStackFrame\n): Promise<OriginalStackFrameResponse | null> {\n  const traced = await batchedTraceSource(project, frame)\n  if (!traced) {\n    const sourcePackage = findSourcePackage(frame)\n    if (sourcePackage) return { sourcePackage }\n    return null\n  }\n\n  return {\n    originalStackFrame: traced.frame,\n    originalCodeFrame: getOriginalCodeFrame(traced.frame, traced.source),\n    sourcePackage: findSourcePackage(traced.frame),\n  }\n}\n\nexport function getOverlayMiddleware(project: Project) {\n  return async function (\n    req: IncomingMessage,\n    res: ServerResponse,\n    next: () => void\n  ): Promise<void> {\n    const { pathname, searchParams } = new URL(req.url!, 'http://n')\n\n    const frame = {\n      file: searchParams.get('file') as string,\n      methodName: searchParams.get('methodName') ?? '<unknown>',\n      line: parseInt(searchParams.get('lineNumber') ?? '0', 10) || 0,\n      column: parseInt(searchParams.get('column') ?? '0', 10) || 0,\n      isServer: searchParams.get('isServer') === 'true',\n    } satisfies TurbopackStackFrame\n\n    if (pathname === '/__nextjs_original-stack-frame') {\n      let originalStackFrame: OriginalStackFrameResponse | null\n      try {\n        originalStackFrame = await createOriginalStackFrame(project, frame)\n      } catch (e: any) {\n        return internalServerError(res, e.message)\n      }\n\n      if (!originalStackFrame) {\n        res.statusCode = 404\n        res.end('Unable to resolve sourcemap')\n        return\n      }\n\n      return json(res, originalStackFrame)\n    } else if (pathname === '/__nextjs_launch-editor') {\n      if (!frame.file) return badRequest(res)\n\n      const fileExists = await fs.access(frame.file, FS.F_OK).then(\n        () => true,\n        () => false\n      )\n      if (!fileExists) return noContent(res)\n\n      try {\n        launchEditor(frame.file, frame.line ?? 1, frame.column ?? 1)\n      } catch (err) {\n        console.log('Failed to launch editor:', err)\n        return internalServerError(res)\n      }\n\n      noContent(res)\n    }\n\n    return next()\n  }\n}\n"],"names":["batchedTraceSource","createOriginalStackFrame","getOverlayMiddleware","currentSourcesByFile","Map","project","frame","file","decodeURIComponent","undefined","sourceFrame","traceSource","source","includes","isInternal","sourcePromise","get","getSourceForAsset","set","setTimeout","delete","lineNumber","line","column","methodName","arguments","traced","sourcePackage","findSourcePackage","originalStackFrame","originalCodeFrame","getOriginalCodeFrame","req","res","next","pathname","searchParams","URL","url","parseInt","isServer","e","internalServerError","message","statusCode","end","json","badRequest","fileExists","fs","access","FS","F_OK","then","noContent","launchEditor","err","console","log"],"mappings":"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"}