"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    handleClientError: null,
    handleGlobalErrors: null,
    useErrorHandler: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    handleClientError: function() {
        return handleClientError;
    },
    handleGlobalErrors: function() {
        return handleGlobalErrors;
    },
    useErrorHandler: function() {
        return useErrorHandler;
    }
});
const _react = require("react");
const _ishydrationerror = require("../../../is-hydration-error");
const _attachhydrationerrorstate = require("./attach-hydration-error-state");
const _isnextroutererror = require("../../../is-next-router-error");
let hasHydrationError = false;
const errorQueue = [];
const errorHandlers = [];
const rejectionQueue = [];
const rejectionHandlers = [];
function handleClientError(error) {
    if (!error || !(error instanceof Error) || typeof error.stack !== 'string') {
        // A non-error was thrown, we don't have anything to show. :-(
        return;
    }
    (0, _attachhydrationerrorstate.attachHydrationErrorState)(error);
    // Only queue one hydration every time
    if ((0, _ishydrationerror.isHydrationError)(error)) {
        if (!hasHydrationError) {
            errorQueue.push(error);
        }
        hasHydrationError = true;
    }
    for (const handler of errorHandlers){
        handler(error);
    }
}
function useErrorHandler(handleOnUnhandledError, handleOnUnhandledRejection) {
    (0, _react.useEffect)(()=>{
        // Handle queued errors.
        errorQueue.forEach(handleOnUnhandledError);
        rejectionQueue.forEach(handleOnUnhandledRejection);
        // Listen to new errors.
        errorHandlers.push(handleOnUnhandledError);
        rejectionHandlers.push(handleOnUnhandledRejection);
        return ()=>{
            // Remove listeners.
            errorHandlers.splice(errorHandlers.indexOf(handleOnUnhandledError), 1);
            rejectionHandlers.splice(rejectionHandlers.indexOf(handleOnUnhandledRejection), 1);
        };
    }, [
        handleOnUnhandledError,
        handleOnUnhandledRejection
    ]);
}
function handleGlobalErrors() {
    if (typeof window !== 'undefined') {
        try {
            // Increase the number of stack frames on the client
            Error.stackTraceLimit = 50;
        } catch (e) {}
        window.addEventListener('error', (event)=>{
            if ((0, _isnextroutererror.isNextRouterError)(event.error)) {
                event.preventDefault();
                return false;
            }
            handleClientError(event.error);
        });
        window.addEventListener('unhandledrejection', (ev)=>{
            const reason = ev == null ? void 0 : ev.reason;
            if ((0, _isnextroutererror.isNextRouterError)(reason)) {
                ev.preventDefault();
                return;
            }
            if (!reason || !(reason instanceof Error) || typeof reason.stack !== 'string') {
                // A non-error was thrown, we don't have anything to show. :-(
                return;
            }
            const e = reason;
            rejectionQueue.push(e);
            for (const handler of rejectionHandlers){
                handler(e);
            }
        });
    }
}

if ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {
  Object.defineProperty(exports.default, '__esModule', { value: true });
  Object.assign(exports.default, exports);
  module.exports = exports.default;
}

//# sourceMappingURL=use-error-handler.js.map