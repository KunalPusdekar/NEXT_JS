{"version":3,"sources":["../../../../src/server/route-modules/app-route/module.ts"],"sourcesContent":["import type { NextConfig } from '../../config-shared'\nimport type { AppRouteRouteDefinition } from '../../route-definitions/app-route-route-definition'\nimport type { AppSegmentConfig } from '../../../build/segment-config/app/app-segment-config'\nimport type { NextRequest } from '../../web/spec-extension/request'\nimport type { PrerenderManifest } from '../../../build'\nimport type { NextURL } from '../../web/next-url'\nimport type { DeepReadonly } from '../../../shared/lib/deep-readonly'\n\nimport {\n  RouteModule,\n  type RouteModuleHandleContext,\n  type RouteModuleOptions,\n} from '../route-module'\nimport {\n  withRequestStore,\n  type RequestContext,\n} from '../../async-storage/with-request-store'\nimport {\n  withWorkStore,\n  type WorkStoreContext,\n} from '../../async-storage/with-work-store'\nimport { type HTTP_METHOD, HTTP_METHODS, isHTTPMethod } from '../../web/http'\nimport { getImplicitTags } from '../../lib/implicit-tags'\nimport { patchFetch } from '../../lib/patch-fetch'\nimport { getTracer } from '../../lib/trace/tracer'\nimport { AppRouteRouteHandlersSpan } from '../../lib/trace/constants'\nimport { getPathnameFromAbsolutePath } from './helpers/get-pathname-from-absolute-path'\nimport * as Log from '../../../build/output/log'\nimport { autoImplementMethods } from './helpers/auto-implement-methods'\nimport {\n  appendMutableCookies,\n  type ReadonlyRequestCookies,\n} from '../../web/spec-extension/adapters/request-cookies'\nimport { HeadersAdapter } from '../../web/spec-extension/adapters/headers'\nimport { RequestCookiesAdapter } from '../../web/spec-extension/adapters/request-cookies'\nimport { parsedUrlQueryToParams } from './helpers/parsed-url-query-to-params'\n\nimport * as serverHooks from '../../../client/components/hooks-server-context'\nimport { DynamicServerError } from '../../../client/components/hooks-server-context'\n\nimport {\n  workAsyncStorage,\n  type WorkStore,\n} from '../../app-render/work-async-storage.external'\nimport {\n  workUnitAsyncStorage,\n  type WorkUnitStore,\n  type PrerenderStore,\n} from '../../app-render/work-unit-async-storage.external'\nimport {\n  actionAsyncStorage,\n  type ActionStore,\n} from '../../app-render/action-async-storage.external'\nimport * as sharedModules from './shared-modules'\nimport { getIsServerAction } from '../../lib/server-action-request-meta'\nimport { RequestCookies } from 'next/dist/compiled/@edge-runtime/cookies'\nimport { cleanURL } from './helpers/clean-url'\nimport { StaticGenBailoutError } from '../../../client/components/static-generation-bailout'\nimport { isStaticGenEnabled } from './helpers/is-static-gen-enabled'\nimport {\n  trackDynamicDataAccessed,\n  createDynamicTrackingState,\n  getFirstDynamicReason,\n  isPrerenderInterruptedError,\n} from '../../app-render/dynamic-rendering'\nimport { ReflectAdapter } from '../../web/spec-extension/adapters/reflect'\nimport type { RenderOptsPartial } from '../../app-render/types'\nimport { CacheSignal } from '../../app-render/cache-signal'\nimport { scheduleImmediate } from '../../../lib/scheduler'\nimport { createServerParamsForRoute } from '../../request/params'\nimport type { AppSegment } from '../../../build/segment-config/app/app-segments'\nimport {\n  getRedirectStatusCodeFromError,\n  getURLFromRedirectError,\n  isRedirectError,\n  type RedirectError,\n} from '../../../client/components/redirect'\nimport { isNotFoundError } from '../../../client/components/not-found'\nimport { RedirectStatusCode } from '../../../client/components/redirect-status-code'\nimport { INFINITE_CACHE } from '../../../lib/constants'\n\nexport class WrappedNextRouterError {\n  constructor(\n    public readonly error: RedirectError,\n    public readonly headers?: Headers\n  ) {}\n}\n\n/**\n * The AppRouteModule is the type of the module exported by the bundled App\n * Route module.\n */\nexport type AppRouteModule = typeof import('../../../build/templates/app-route')\n\n/**\n * AppRouteRouteHandlerContext is the context that is passed to the route\n * handler for app routes.\n */\nexport interface AppRouteRouteHandlerContext extends RouteModuleHandleContext {\n  renderOpts: WorkStoreContext['renderOpts'] &\n    Pick<RenderOptsPartial, 'onInstrumentationRequestError'>\n  prerenderManifest: DeepReadonly<PrerenderManifest>\n}\n\n/**\n * AppRouteHandlerFnContext is the context that is passed to the handler as the\n * second argument.\n */\ntype AppRouteHandlerFnContext = {\n  params?: Promise<Record<string, string | string[] | undefined>>\n}\n\n/**\n * Handler function for app routes. If a non-Response value is returned, an error\n * will be thrown.\n */\nexport type AppRouteHandlerFn = (\n  /**\n   * Incoming request object.\n   */\n  req: NextRequest,\n  /**\n   * Context properties on the request (including the parameters if this was a\n   * dynamic route).\n   */\n  ctx: AppRouteHandlerFnContext\n) => unknown\n\n/**\n * AppRouteHandlers describes the handlers for app routes that is provided by\n * the userland module.\n */\nexport type AppRouteHandlers = {\n  [method in HTTP_METHOD]?: AppRouteHandlerFn\n}\n\n/**\n * AppRouteUserlandModule is the userland module that is provided for app\n * routes. This contains all the user generated code.\n */\nexport type AppRouteUserlandModule = AppRouteHandlers &\n  Pick<\n    AppSegmentConfig,\n    'dynamic' | 'revalidate' | 'dynamicParams' | 'fetchCache'\n  > &\n  Pick<AppSegment, 'generateStaticParams'>\n\n/**\n * AppRouteRouteModuleOptions is the options that are passed to the app route\n * module from the bundled code.\n */\nexport interface AppRouteRouteModuleOptions\n  extends RouteModuleOptions<AppRouteRouteDefinition, AppRouteUserlandModule> {\n  readonly resolvedPagePath: string\n  readonly nextConfigOutput: NextConfig['output']\n}\n\n/**\n * AppRouteRouteHandler is the handler for app routes.\n */\nexport class AppRouteRouteModule extends RouteModule<\n  AppRouteRouteDefinition,\n  AppRouteUserlandModule\n> {\n  /**\n   * A reference to the request async storage.\n   */\n  public readonly workUnitAsyncStorage = workUnitAsyncStorage\n\n  /**\n   * A reference to the static generation async storage.\n   */\n  public readonly workAsyncStorage = workAsyncStorage\n\n  /**\n   * An interface to call server hooks which interact with the underlying\n   * storage.\n   */\n  public readonly serverHooks = serverHooks\n\n  public static readonly sharedModules = sharedModules\n\n  /**\n   * A reference to the mutation related async storage, such as mutations of\n   * cookies.\n   */\n  public readonly actionAsyncStorage = actionAsyncStorage\n\n  public readonly resolvedPagePath: string\n  public readonly nextConfigOutput: NextConfig['output'] | undefined\n\n  private readonly methods: Record<HTTP_METHOD, AppRouteHandlerFn>\n  private readonly hasNonStaticMethods: boolean\n  private readonly dynamic: AppRouteUserlandModule['dynamic']\n\n  constructor({\n    userland,\n    definition,\n    resolvedPagePath,\n    nextConfigOutput,\n  }: AppRouteRouteModuleOptions) {\n    super({ userland, definition })\n\n    this.resolvedPagePath = resolvedPagePath\n    this.nextConfigOutput = nextConfigOutput\n\n    // Automatically implement some methods if they aren't implemented by the\n    // userland module.\n    this.methods = autoImplementMethods(userland)\n\n    // Get the non-static methods for this route.\n    this.hasNonStaticMethods = hasNonStaticMethods(userland)\n\n    // Get the dynamic property from the userland module.\n    this.dynamic = this.userland.dynamic\n    if (this.nextConfigOutput === 'export') {\n      if (this.dynamic === 'force-dynamic') {\n        throw new Error(\n          `export const dynamic = \"force-dynamic\" on page \"${definition.pathname}\" cannot be used with \"output: export\". See more info here: https://nextjs.org/docs/advanced-features/static-html-export`\n        )\n      } else if (!isStaticGenEnabled(this.userland) && this.userland['GET']) {\n        throw new Error(\n          `export const dynamic = \"force-static\"/export const revalidate not configured on route \"${definition.pathname}\" with \"output: export\". See more info here: https://nextjs.org/docs/advanced-features/static-html-export`\n        )\n      } else {\n        this.dynamic = 'error'\n      }\n    }\n\n    // We only warn in development after here, so return if we're not in\n    // development.\n    if (process.env.NODE_ENV === 'development') {\n      // Print error in development if the exported handlers are in lowercase, only\n      // uppercase handlers are supported.\n      const lowercased = HTTP_METHODS.map((method) => method.toLowerCase())\n      for (const method of lowercased) {\n        if (method in this.userland) {\n          Log.error(\n            `Detected lowercase method '${method}' in '${\n              this.resolvedPagePath\n            }'. Export the uppercase '${method.toUpperCase()}' method name to fix this error.`\n          )\n        }\n      }\n\n      // Print error if the module exports a default handler, they must use named\n      // exports for each HTTP method.\n      if ('default' in this.userland) {\n        Log.error(\n          `Detected default export in '${this.resolvedPagePath}'. Export a named export for each HTTP method instead.`\n        )\n      }\n\n      // If there is no methods exported by this module, then return a not found\n      // response.\n      if (!HTTP_METHODS.some((method) => method in this.userland)) {\n        Log.error(\n          `No HTTP methods exported in '${this.resolvedPagePath}'. Export a named export for each HTTP method.`\n        )\n      }\n    }\n  }\n\n  /**\n   * Resolves the handler function for the given method.\n   *\n   * @param method the requested method\n   * @returns the handler function for the given method\n   */\n  private resolve(method: string): AppRouteHandlerFn {\n    // Ensure that the requested method is a valid method (to prevent RCE's).\n    if (!isHTTPMethod(method)) return () => new Response(null, { status: 400 })\n\n    // Return the handler.\n    return this.methods[method]\n  }\n\n  private async do(\n    handler: AppRouteHandlerFn,\n    actionStore: ActionStore,\n    workStore: WorkStore,\n    workUnitStore: WorkUnitStore,\n    implicitTags: string[],\n    request: NextRequest,\n    context: AppRouteRouteHandlerContext\n  ) {\n    const isStaticGeneration = workStore.isStaticGeneration\n    const dynamicIOEnabled = !!context.renderOpts.experimental?.dynamicIO\n\n    // Patch the global fetch.\n    patchFetch({\n      workAsyncStorage: this.workAsyncStorage,\n      workUnitAsyncStorage: this.workUnitAsyncStorage,\n    })\n\n    const handlerContext: AppRouteHandlerFnContext = {\n      params: context.params\n        ? createServerParamsForRoute(\n            parsedUrlQueryToParams(context.params),\n            workStore\n          )\n        : undefined,\n    }\n\n    let prerenderStore: null | PrerenderStore = null\n\n    let res: unknown\n    try {\n      if (isStaticGeneration) {\n        const userlandRevalidate = this.userland.revalidate\n        const defaultRevalidate: number =\n          // If the static generation store does not have a revalidate value\n          // set, then we should set it the revalidate value from the userland\n          // module or default to false.\n          userlandRevalidate === false || userlandRevalidate === undefined\n            ? INFINITE_CACHE\n            : userlandRevalidate\n\n        if (dynamicIOEnabled) {\n          /**\n           * When we are attempting to statically prerender the GET handler of a route.ts module\n           * and dynamicIO is on we follow a similar pattern to rendering.\n           *\n           * We first run the handler letting caches fill. If something synchronously dynamic occurs\n           * during this prospective render then we can infer it will happen on every render and we\n           * just bail out of prerendering.\n           *\n           * Next we run the handler again and we check if we get a result back in a microtask.\n           * Next.js expects the return value to be a Response or a Thenable that resolves to a Response.\n           * Unfortunately Response's do not allow for acessing the response body synchronously or in\n           * a microtask so we need to allow one more task to unwrap the response body. This is a slightly\n           * different semantic than what we have when we render and it means that certain tasks can still\n           * execute before a prerender completes such as a carefully timed setImmediate.\n           *\n           * Functionally though IO should still take longer than the time it takes to unwrap the response body\n           * so our heuristic of excluding any IO should be preserved.\n           */\n          const prospectiveController = new AbortController()\n          let prospectiveRenderIsDynamic = false\n          const cacheSignal = new CacheSignal()\n          let dynamicTracking = createDynamicTrackingState(undefined)\n\n          const prospectiveRoutePrerenderStore: PrerenderStore =\n            (prerenderStore = {\n              type: 'prerender',\n              phase: 'action',\n              implicitTags: implicitTags,\n              renderSignal: prospectiveController.signal,\n              cacheSignal,\n              // During prospective render we don't use a controller\n              // because we need to let all caches fill.\n              controller: null,\n              dynamicTracking,\n              revalidate: defaultRevalidate,\n              tags: [...implicitTags],\n            })\n\n          let prospectiveResult\n          try {\n            prospectiveResult = this.workUnitAsyncStorage.run(\n              prospectiveRoutePrerenderStore,\n              handler,\n              request,\n              handlerContext\n            )\n          } catch (err) {\n            if (isPrerenderInterruptedError(err)) {\n              // the route handler called an API which is always dynamic\n              // there is no need to try again\n              prospectiveRenderIsDynamic = true\n            }\n          }\n          if (\n            typeof prospectiveResult === 'object' &&\n            prospectiveResult !== null &&\n            typeof (prospectiveResult as any).then === 'function'\n          ) {\n            // The handler returned a Thenable. We'll listen for rejections to determine\n            // if the route is erroring for dynamic reasons.\n            ;(prospectiveResult as any as Promise<unknown>).then(\n              () => {},\n              (err) => {\n                if (isPrerenderInterruptedError(err)) {\n                  // the route handler called an API which is always dynamic\n                  // there is no need to try again\n                  prospectiveRenderIsDynamic = true\n                }\n              }\n            )\n          }\n          await cacheSignal.cacheReady()\n\n          if (prospectiveRenderIsDynamic) {\n            // the route handler called an API which is always dynamic\n            // there is no need to try again\n            const dynamicReason = getFirstDynamicReason(dynamicTracking)\n            if (dynamicReason) {\n              throw new DynamicServerError(\n                `Route ${workStore.route} couldn't be rendered statically because it used \\`${dynamicReason}\\`. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n              )\n            } else {\n              console.error(\n                'Expected Next.js to keep track of reason for opting out of static rendering but one was not found. This is a bug in Next.js'\n              )\n              throw new DynamicServerError(\n                `Route ${workStore.route} couldn't be rendered statically because it used a dynamic API. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n              )\n            }\n          }\n\n          // TODO start passing this controller to the route handler. We should expose\n          // it so the handler to abort inflight requests and other operations if we abort\n          // the prerender.\n          const finalController = new AbortController()\n          dynamicTracking = createDynamicTrackingState(undefined)\n\n          const finalRoutePrerenderStore: PrerenderStore = (prerenderStore = {\n            type: 'prerender',\n            phase: 'action',\n            implicitTags: implicitTags,\n            renderSignal: finalController.signal,\n            cacheSignal: null,\n            controller: finalController,\n            dynamicTracking,\n            revalidate: defaultRevalidate,\n            tags: [...implicitTags],\n          })\n\n          let responseHandled = false\n          res = await new Promise((resolve, reject) => {\n            scheduleImmediate(async () => {\n              try {\n                const result = await (this.workUnitAsyncStorage.run(\n                  finalRoutePrerenderStore,\n                  handler,\n                  request,\n                  handlerContext\n                ) as Promise<Response>)\n                if (responseHandled) {\n                  // we already rejected in the followup task\n                  return\n                } else if (!(result instanceof Response)) {\n                  // This is going to error but we let that happen below\n                  resolve(result)\n                  return\n                }\n\n                responseHandled = true\n\n                let bodyHandled = false\n                result.arrayBuffer().then((body) => {\n                  if (!bodyHandled) {\n                    bodyHandled = true\n\n                    resolve(\n                      new Response(body, {\n                        headers: result.headers,\n                        status: result.status,\n                        statusText: result.statusText,\n                      })\n                    )\n                  }\n                }, reject)\n                scheduleImmediate(() => {\n                  if (!bodyHandled) {\n                    bodyHandled = true\n                    finalController.abort()\n                    reject(createDynamicIOError(workStore.route))\n                  }\n                })\n              } catch (err) {\n                reject(err)\n              }\n            })\n            scheduleImmediate(() => {\n              if (!responseHandled) {\n                responseHandled = true\n                finalController.abort()\n                reject(createDynamicIOError(workStore.route))\n              }\n            })\n          })\n          if (finalController.signal.aborted) {\n            // We aborted from within the execution\n            throw createDynamicIOError(workStore.route)\n          } else {\n            // We didn't abort during the execution. We can abort now as a matter of semantics\n            // though at the moment nothing actually consumes this signal so it won't halt any\n            // inflight work.\n            finalController.abort()\n          }\n        } else {\n          prerenderStore = {\n            type: 'prerender-legacy',\n            phase: 'action',\n            implicitTags: implicitTags,\n            revalidate: defaultRevalidate,\n            tags: [...implicitTags],\n          }\n\n          res = await workUnitAsyncStorage.run(\n            prerenderStore,\n            handler,\n            request,\n            handlerContext\n          )\n        }\n      } else {\n        res = await handler(request, handlerContext)\n      }\n    } catch (err) {\n      if (isRedirectError(err)) {\n        const url = getURLFromRedirectError(err)\n        if (!url) {\n          throw new Error('Invariant: Unexpected redirect url format')\n        }\n\n        // We need to capture any headers that should be sent on\n        // the response.\n        const headers = new Headers({ Location: url })\n\n        // Let's append any cookies that were added by the\n        // cookie API.\n        if (workUnitStore.type === 'request') {\n          appendMutableCookies(headers, workUnitStore.mutableCookies)\n        }\n\n        // Return the redirect response.\n        return new Response(null, {\n          // If we're in an action, we want to use a 303 redirect as we don't\n          // want the POST request to follow the redirect, as it could result in\n          // erroneous re-submissions.\n          status: actionStore.isAction\n            ? RedirectStatusCode.SeeOther\n            : getRedirectStatusCodeFromError(err),\n          headers,\n        })\n      } else if (isNotFoundError(err)) {\n        return new Response(null, { status: 404 })\n      }\n\n      throw err\n    }\n\n    // Validate that the response is a valid response object.\n    if (!(res instanceof Response)) {\n      throw new Error(\n        `No response is returned from route handler '${this.resolvedPagePath}'. Ensure you return a \\`Response\\` or a \\`NextResponse\\` in all branches of your handler.`\n      )\n    }\n\n    context.renderOpts.fetchMetrics = workStore.fetchMetrics\n\n    context.renderOpts.pendingWaitUntil = Promise.all([\n      workStore.incrementalCache?.revalidateTag(\n        workStore.revalidatedTags || []\n      ),\n      ...Object.values(workStore.pendingRevalidates || {}),\n    ])\n\n    if (prerenderStore) {\n      ;(context.renderOpts as any).collectedTags =\n        prerenderStore.tags?.join(',')\n      ;(context.renderOpts as any).collectedRevalidate =\n        prerenderStore.revalidate\n    }\n\n    // It's possible cookies were set in the handler, so we need\n    // to merge the modified cookies and the returned response\n    // here.\n    const headers = new Headers(res.headers)\n    if (\n      workUnitStore.type === 'request' &&\n      appendMutableCookies(headers, workUnitStore.mutableCookies)\n    ) {\n      return new Response(res.body, {\n        status: res.status,\n        statusText: res.statusText,\n        headers,\n      })\n    }\n\n    return res\n  }\n\n  public async handle(\n    req: NextRequest,\n    context: AppRouteRouteHandlerContext\n  ): Promise<Response> {\n    // Get the handler function for the given method.\n    const handler = this.resolve(req.method)\n\n    const implicitTags = getImplicitTags(\n      this.definition.page,\n      req.nextUrl,\n      // App Routes don't support unknown route params.\n      null\n    )\n\n    // Get the context for the request.\n    const requestContext: RequestContext = {\n      req,\n      res: undefined,\n      url: req.nextUrl,\n      phase: 'action',\n      renderOpts: {\n        previewProps: context.prerenderManifest.preview,\n      },\n      implicitTags,\n    }\n\n    // Get the context for the static generation.\n    const staticGenerationContext: WorkStoreContext = {\n      // App Routes don't support unknown route params.\n      fallbackRouteParams: null,\n      page: this.definition.page,\n      renderOpts: context.renderOpts,\n    }\n\n    // Add the fetchCache option to the renderOpts.\n    staticGenerationContext.renderOpts.fetchCache = this.userland.fetchCache\n\n    const actionStore: ActionStore = {\n      isAppRoute: true,\n      isAction: getIsServerAction(req),\n    }\n\n    // Run the handler with the request AsyncLocalStorage to inject the helper\n    // support. We set this to `unknown` because the type is not known until\n    // runtime when we do a instanceof check below.\n    const response: unknown = await this.actionAsyncStorage.run(\n      actionStore,\n      () =>\n        withRequestStore(\n          this.workUnitAsyncStorage,\n          requestContext,\n          (workUnitStore) =>\n            withWorkStore(\n              this.workAsyncStorage,\n              staticGenerationContext,\n              async (workStore) => {\n                // Check to see if we should bail out of static generation based on\n                // having non-static methods.\n                if (this.hasNonStaticMethods) {\n                  if (workStore.isStaticGeneration) {\n                    const err = new DynamicServerError(\n                      'Route is configured with methods that cannot be statically generated.'\n                    )\n                    workStore.dynamicUsageDescription = err.message\n                    workStore.dynamicUsageStack = err.stack\n                    throw err\n                  }\n                }\n\n                // We assume we can pass the original request through however we may end up\n                // proxying it in certain circumstances based on execution type and configuration\n                let request = req\n\n                // Update the static generation store based on the dynamic property.\n                switch (this.dynamic) {\n                  case 'force-dynamic': {\n                    // Routes of generated paths should be dynamic\n                    workStore.forceDynamic = true\n                    break\n                  }\n                  case 'force-static':\n                    // The dynamic property is set to force-static, so we should\n                    // force the page to be static.\n                    workStore.forceStatic = true\n                    // We also Proxy the request to replace dynamic data on the request\n                    // with empty stubs to allow for safely executing as static\n                    request = new Proxy(req, forceStaticRequestHandlers)\n                    break\n                  case 'error':\n                    // The dynamic property is set to error, so we should throw an\n                    // error if the page is being statically generated.\n                    workStore.dynamicShouldError = true\n                    if (workStore.isStaticGeneration)\n                      request = new Proxy(req, requireStaticRequestHandlers)\n                    break\n                  default:\n                    // We proxy `NextRequest` to track dynamic access, and potentially bail out of static generation\n                    request = proxyNextRequest(req, workStore)\n                }\n\n                // TODO: propagate this pathname from route matcher\n                const route = getPathnameFromAbsolutePath(this.resolvedPagePath)\n\n                const tracer = getTracer()\n\n                // Update the root span attribute for the route.\n                tracer.setRootSpanAttribute('next.route', route)\n\n                return tracer.trace(\n                  AppRouteRouteHandlersSpan.runHandler,\n                  {\n                    spanName: `executing api route (app) ${route}`,\n                    attributes: {\n                      'next.route': route,\n                    },\n                  },\n                  async () =>\n                    this.do(\n                      handler,\n                      actionStore,\n                      workStore,\n                      workUnitStore,\n                      implicitTags,\n                      request,\n                      context\n                    )\n                )\n              }\n            )\n        )\n    )\n\n    // If the handler did't return a valid response, then return the internal\n    // error response.\n    if (!(response instanceof Response)) {\n      // TODO: validate the correct handling behavior, maybe log something?\n      return new Response(null, { status: 500 })\n    }\n\n    if (response.headers.has('x-middleware-rewrite')) {\n      throw new Error(\n        'NextResponse.rewrite() was used in a app route handler, this is not currently supported. Please remove the invocation to continue.'\n      )\n    }\n\n    if (response.headers.get('x-middleware-next') === '1') {\n      // TODO: move this error into the `NextResponse.next()` function.\n      throw new Error(\n        'NextResponse.next() was used in a app route handler, this is not supported. See here for more info: https://nextjs.org/docs/messages/next-response-next-in-app-route-handler'\n      )\n    }\n\n    return response\n  }\n}\n\nexport default AppRouteRouteModule\n\n/**\n * Gets all the method names for handlers that are not considered static.\n *\n * @param handlers the handlers from the userland module\n * @returns the method names that are not considered static or false if all\n *          methods are static\n */\nexport function hasNonStaticMethods(handlers: AppRouteHandlers): boolean {\n  if (\n    // Order these by how common they are to be used\n    handlers.POST ||\n    handlers.PUT ||\n    handlers.DELETE ||\n    handlers.PATCH ||\n    handlers.OPTIONS\n  ) {\n    return true\n  }\n  return false\n}\n\n// These symbols will be used to stash cached values on Proxied requests without requiring\n// additional closures or storage such as WeakMaps.\nconst nextURLSymbol = Symbol('nextUrl')\nconst requestCloneSymbol = Symbol('clone')\nconst urlCloneSymbol = Symbol('clone')\nconst searchParamsSymbol = Symbol('searchParams')\nconst hrefSymbol = Symbol('href')\nconst toStringSymbol = Symbol('toString')\nconst headersSymbol = Symbol('headers')\nconst cookiesSymbol = Symbol('cookies')\n\ntype RequestSymbolTarget = {\n  [headersSymbol]?: Headers\n  [cookiesSymbol]?: RequestCookies | ReadonlyRequestCookies\n  [nextURLSymbol]?: NextURL\n  [requestCloneSymbol]?: () => NextRequest\n}\n\ntype UrlSymbolTarget = {\n  [searchParamsSymbol]?: URLSearchParams\n  [hrefSymbol]?: string\n  [toStringSymbol]?: () => string\n  [urlCloneSymbol]?: () => NextURL\n}\n\n/**\n * The general technique with these proxy handlers is to prioritize keeping them static\n * by stashing computed values on the Proxy itself. This is safe because the Proxy is\n * inaccessible to the consumer since all operations are forwarded\n */\nconst forceStaticRequestHandlers = {\n  get(\n    target: NextRequest & RequestSymbolTarget,\n    prop: string | symbol,\n    receiver: any\n  ): unknown {\n    switch (prop) {\n      case 'headers':\n        return (\n          target[headersSymbol] ||\n          (target[headersSymbol] = HeadersAdapter.seal(new Headers({})))\n        )\n      case 'cookies':\n        return (\n          target[cookiesSymbol] ||\n          (target[cookiesSymbol] = RequestCookiesAdapter.seal(\n            new RequestCookies(new Headers({}))\n          ))\n        )\n      case 'nextUrl':\n        return (\n          target[nextURLSymbol] ||\n          (target[nextURLSymbol] = new Proxy(\n            target.nextUrl,\n            forceStaticNextUrlHandlers\n          ))\n        )\n      case 'url':\n        // we don't need to separately cache this we can just read the nextUrl\n        // and return the href since we know it will have been stripped of any\n        // dynamic parts. We access via the receiver to trigger the get trap\n        return receiver.nextUrl.href\n      case 'geo':\n      case 'ip':\n        return undefined\n      case 'clone':\n        return (\n          target[requestCloneSymbol] ||\n          (target[requestCloneSymbol] = () =>\n            new Proxy(\n              // This is vaguely unsafe but it's required since NextRequest does not implement\n              // clone. The reason we might expect this to work in this context is the Proxy will\n              // respond with static-amenable values anyway somewhat restoring the interface.\n              // @TODO we need to rethink NextRequest and NextURL because they are not sufficientlly\n              // sophisticated to adequately represent themselves in all contexts. A better approach is\n              // to probably embed the static generation logic into the class itself removing the need\n              // for any kind of proxying\n              target.clone() as NextRequest,\n              forceStaticRequestHandlers\n            ))\n        )\n      default:\n        return ReflectAdapter.get(target, prop, receiver)\n    }\n  },\n  // We don't need to proxy set because all the properties we proxy are ready only\n  // and will be ignored\n}\n\nconst forceStaticNextUrlHandlers = {\n  get(\n    target: NextURL & UrlSymbolTarget,\n    prop: string | symbol,\n    receiver: any\n  ): unknown {\n    switch (prop) {\n      // URL properties\n      case 'search':\n        return ''\n      case 'searchParams':\n        return (\n          target[searchParamsSymbol] ||\n          (target[searchParamsSymbol] = new URLSearchParams())\n        )\n      case 'href':\n        return (\n          target[hrefSymbol] ||\n          (target[hrefSymbol] = cleanURL(target.href).href)\n        )\n      case 'toJSON':\n      case 'toString':\n        return (\n          target[toStringSymbol] ||\n          (target[toStringSymbol] = () => receiver.href)\n        )\n\n      // NextUrl properties\n      case 'url':\n        // Currently nextURL does not expose url but our Docs indicate that it is an available property\n        // I am forcing this to undefined here to avoid accidentally exposing a dynamic value later if\n        // the underlying nextURL ends up adding this property\n        return undefined\n      case 'clone':\n        return (\n          target[urlCloneSymbol] ||\n          (target[urlCloneSymbol] = () =>\n            new Proxy(target.clone(), forceStaticNextUrlHandlers))\n        )\n      default:\n        return ReflectAdapter.get(target, prop, receiver)\n    }\n  },\n}\n\nfunction proxyNextRequest(request: NextRequest, workStore: WorkStore) {\n  const nextUrlHandlers = {\n    get(\n      target: NextURL & UrlSymbolTarget,\n      prop: string | symbol,\n      receiver: any\n    ): unknown {\n      switch (prop) {\n        case 'search':\n        case 'searchParams':\n        case 'url':\n        case 'href':\n        case 'toJSON':\n        case 'toString':\n        case 'origin': {\n          const workUnitStore = workUnitAsyncStorage.getStore()\n          trackDynamicDataAccessed(workStore, workUnitStore, `nextUrl.${prop}`)\n          return ReflectAdapter.get(target, prop, receiver)\n        }\n        case 'clone':\n          return (\n            target[urlCloneSymbol] ||\n            (target[urlCloneSymbol] = () =>\n              new Proxy(target.clone(), nextUrlHandlers))\n          )\n        default:\n          return ReflectAdapter.get(target, prop, receiver)\n      }\n    },\n  }\n\n  const nextRequestHandlers = {\n    get(\n      target: NextRequest & RequestSymbolTarget,\n      prop: string | symbol\n    ): unknown {\n      switch (prop) {\n        case 'nextUrl':\n          return (\n            target[nextURLSymbol] ||\n            (target[nextURLSymbol] = new Proxy(target.nextUrl, nextUrlHandlers))\n          )\n        case 'headers':\n        case 'cookies':\n        case 'url':\n        case 'body':\n        case 'blob':\n        case 'json':\n        case 'text':\n        case 'arrayBuffer':\n        case 'formData': {\n          const workUnitStore = workUnitAsyncStorage.getStore()\n          trackDynamicDataAccessed(workStore, workUnitStore, `request.${prop}`)\n          // The receiver arg is intentionally the same as the target to fix an issue with\n          // edge runtime, where attempting to access internal slots with the wrong `this` context\n          // results in an error.\n          return ReflectAdapter.get(target, prop, target)\n        }\n        case 'clone':\n          return (\n            target[requestCloneSymbol] ||\n            (target[requestCloneSymbol] = () =>\n              new Proxy(\n                // This is vaguely unsafe but it's required since NextRequest does not implement\n                // clone. The reason we might expect this to work in this context is the Proxy will\n                // respond with static-amenable values anyway somewhat restoring the interface.\n                // @TODO we need to rethink NextRequest and NextURL because they are not sufficientlly\n                // sophisticated to adequately represent themselves in all contexts. A better approach is\n                // to probably embed the static generation logic into the class itself removing the need\n                // for any kind of proxying\n                target.clone() as NextRequest,\n                nextRequestHandlers\n              ))\n          )\n        default:\n          // The receiver arg is intentionally the same as the target to fix an issue with\n          // edge runtime, where attempting to access internal slots with the wrong `this` context\n          // results in an error.\n          return ReflectAdapter.get(target, prop, target)\n      }\n    },\n    // We don't need to proxy set because all the properties we proxy are ready only\n    // and will be ignored\n  }\n\n  return new Proxy(request, nextRequestHandlers)\n}\n\nconst requireStaticRequestHandlers = {\n  get(\n    target: NextRequest & RequestSymbolTarget,\n    prop: string | symbol,\n    receiver: any\n  ): unknown {\n    switch (prop) {\n      case 'nextUrl':\n        return (\n          target[nextURLSymbol] ||\n          (target[nextURLSymbol] = new Proxy(\n            target.nextUrl,\n            requireStaticNextUrlHandlers\n          ))\n        )\n      case 'headers':\n      case 'cookies':\n      case 'url':\n      case 'body':\n      case 'blob':\n      case 'json':\n      case 'text':\n      case 'arrayBuffer':\n      case 'formData':\n        throw new StaticGenBailoutError(\n          `Route ${target.nextUrl.pathname} with \\`dynamic = \"error\"\\` couldn't be rendered statically because it used \\`request.${prop}\\`.`\n        )\n      case 'clone':\n        return (\n          target[requestCloneSymbol] ||\n          (target[requestCloneSymbol] = () =>\n            new Proxy(\n              // This is vaguely unsafe but it's required since NextRequest does not implement\n              // clone. The reason we might expect this to work in this context is the Proxy will\n              // respond with static-amenable values anyway somewhat restoring the interface.\n              // @TODO we need to rethink NextRequest and NextURL because they are not sufficientlly\n              // sophisticated to adequately represent themselves in all contexts. A better approach is\n              // to probably embed the static generation logic into the class itself removing the need\n              // for any kind of proxying\n              target.clone() as NextRequest,\n              requireStaticRequestHandlers\n            ))\n        )\n      default:\n        return ReflectAdapter.get(target, prop, receiver)\n    }\n  },\n  // We don't need to proxy set because all the properties we proxy are ready only\n  // and will be ignored\n}\n\nconst requireStaticNextUrlHandlers = {\n  get(\n    target: NextURL & UrlSymbolTarget,\n    prop: string | symbol,\n    receiver: any\n  ): unknown {\n    switch (prop) {\n      case 'search':\n      case 'searchParams':\n      case 'url':\n      case 'href':\n      case 'toJSON':\n      case 'toString':\n      case 'origin':\n        throw new StaticGenBailoutError(\n          `Route ${target.pathname} with \\`dynamic = \"error\"\\` couldn't be rendered statically because it used \\`nextUrl.${prop}\\`.`\n        )\n      case 'clone':\n        return (\n          target[urlCloneSymbol] ||\n          (target[urlCloneSymbol] = () =>\n            new Proxy(target.clone(), requireStaticNextUrlHandlers))\n        )\n      default:\n        return ReflectAdapter.get(target, prop, receiver)\n    }\n  },\n}\n\nfunction createDynamicIOError(route: string) {\n  return new DynamicServerError(\n    `Route ${route} couldn't be rendered statically because it used IO that was not cached. See more info here: https://nextjs.org/docs/messages/dynamic-io`\n  )\n}\n"],"names":["RouteModule","withRequestStore","withWorkStore","HTTP_METHODS","isHTTPMethod","getImplicitTags","patchFetch","getTracer","AppRouteRouteHandlersSpan","getPathnameFromAbsolutePath","Log","autoImplementMethods","appendMutableCookies","HeadersAdapter","RequestCookiesAdapter","parsedUrlQueryToParams","serverHooks","DynamicServerError","workAsyncStorage","workUnitAsyncStorage","actionAsyncStorage","sharedModules","getIsServerAction","RequestCookies","cleanURL","StaticGenBailoutError","isStaticGenEnabled","trackDynamicDataAccessed","createDynamicTrackingState","getFirstDynamicReason","isPrerenderInterruptedError","ReflectAdapter","CacheSignal","scheduleImmediate","createServerParamsForRoute","getRedirectStatusCodeFromError","getURLFromRedirectError","isRedirectError","isNotFoundError","RedirectStatusCode","INFINITE_CACHE","WrappedNextRouterError","constructor","error","headers","AppRouteRouteModule","userland","definition","resolvedPagePath","nextConfigOutput","methods","hasNonStaticMethods","dynamic","Error","pathname","process","env","NODE_ENV","lowercased","map","method","toLowerCase","toUpperCase","some","resolve","Response","status","do","handler","actionStore","workStore","workUnitStore","implicitTags","request","context","isStaticGeneration","dynamicIOEnabled","renderOpts","experimental","dynamicIO","handlerContext","params","undefined","prerenderStore","res","userlandRevalidate","revalidate","defaultRevalidate","prospectiveController","AbortController","prospectiveRenderIsDynamic","cacheSignal","dynamicTracking","prospectiveRoutePrerenderStore","type","phase","renderSignal","signal","controller","tags","prospectiveResult","run","err","then","cacheReady","dynamicReason","route","console","finalController","finalRoutePrerenderStore","responseHandled","Promise","reject","result","bodyHandled","arrayBuffer","body","statusText","abort","createDynamicIOError","aborted","url","Headers","Location","mutableCookies","isAction","SeeOther","fetchMetrics","pendingWaitUntil","all","incrementalCache","revalidateTag","revalidatedTags","Object","values","pendingRevalidates","collectedTags","join","collectedRevalidate","handle","req","page","nextUrl","requestContext","previewProps","prerenderManifest","preview","staticGenerationContext","fallbackRouteParams","fetchCache","isAppRoute","response","dynamicUsageDescription","message","dynamicUsageStack","stack","forceDynamic","forceStatic","Proxy","forceStaticRequestHandlers","dynamicShouldError","requireStaticRequestHandlers","proxyNextRequest","tracer","setRootSpanAttribute","trace","runHandler","spanName","attributes","has","get","handlers","POST","PUT","DELETE","PATCH","OPTIONS","nextURLSymbol","Symbol","requestCloneSymbol","urlCloneSymbol","searchParamsSymbol","hrefSymbol","toStringSymbol","headersSymbol","cookiesSymbol","target","prop","receiver","seal","forceStaticNextUrlHandlers","href","clone","URLSearchParams","nextUrlHandlers","getStore","nextRequestHandlers","requireStaticNextUrlHandlers"],"mappings":"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"}