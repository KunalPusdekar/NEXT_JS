import { workUnitAsyncStorage } from '../app-render/work-unit-async-storage.external';
// The equivalent header is kind of like:
// Cache-Control: max-age=[stale],s-max-age=[revalidate],stale-while-revalidate=[expire-revalidate],stale-if-error=[expire-revalidate]
// Except that stale-while-revalidate/stale-if-error only applies to shared caches - not private caches.
const cacheLifeProfileMap = new Map();
// The default revalidates relatively frequently but doesn't expire to ensure it's always
// able to serve fast results but by default doesn't hang.
export const defaultCacheLife = {
    stale: Number(process.env.__NEXT_CLIENT_ROUTER_STATIC_STALETIME),
    revalidate: 15 * 60,
    expire: Infinity
};
cacheLifeProfileMap.set('default', defaultCacheLife);
function validateCacheLife(profile) {
    if (profile.stale !== undefined) {
        if (profile.stale === false) {
            throw new Error('Pass `Infinity` instead of `false` if you want to cache on the client forever ' + 'without checking with the server.');
        } else if (typeof profile.stale !== 'number') {
            throw new Error('The stale option must be a number of seconds.');
        }
    }
    if (profile.revalidate !== undefined) {
        if (profile.revalidate === false) {
            throw new Error('Pass `Infinity` instead of `false` if you do not want to revalidate by time.');
        } else if (typeof profile.revalidate !== 'number') {
            throw new Error('The revalidate option must be a number of seconds.');
        }
    }
    if (profile.expire !== undefined) {
        if (profile.expire === false) {
            throw new Error('Pass `Infinity` instead of `false` if you want to cache on the client forever ' + 'without checking with the server.');
        } else if (typeof profile.expire !== 'number') {
            throw new Error('The expire option must be a number of seconds.');
        }
    }
    if (profile.revalidate !== undefined && profile.expire !== undefined) {
        if (profile.revalidate > profile.expire) {
            throw new Error('If providing both the revalidate and expire options, ' + 'the expire option must be greater than the revalidate option.' + 'The expire option indicates how many seconds from the start ' + 'until it can no longer be used.');
        }
    }
    if (profile.stale !== undefined && profile.expire !== undefined) {
        if (profile.stale > profile.expire) {
            throw new Error('If providing both the stale and expire options, ' + 'the expire option must be greater than the stale option.' + 'The expire option indicates how many seconds from the start ' + 'until it can no longer be used.');
        }
    }
}
export function cacheLife(profile) {
    if (!process.env.__NEXT_DYNAMIC_IO) {
        throw new Error('cacheLife() is only available with the experimental.dynamicIO config.');
    }
    const workUnitStore = workUnitAsyncStorage.getStore();
    if (!workUnitStore || workUnitStore.type !== 'cache') {
        throw new Error('cacheLife() can only be called inside a "use cache" function.');
    }
    if (typeof profile === 'string') {
        const configuredProfile = cacheLifeProfileMap.get(profile);
        if (configuredProfile === undefined) {
            if (cacheLifeProfileMap.has(profile.trim())) {
                throw new Error(`Unknown cacheLife profile "${profile}" is not configured in next.config.js\n` + `Did you mean "${profile.trim()}" without the spaces?`);
            }
            throw new Error(`Unknown cacheLife profile "${profile}" is not configured in next.config.js\n` + 'module.exports = {\n' + '  experimental: {\n' + '    cacheLife: {\n' + `      "${profile}": ...\n` + '    }\n' + '  }\n' + '}');
        }
        profile = configuredProfile;
    } else if (typeof profile !== 'object' || profile === null || Array.isArray(profile)) {
        throw new Error('Invalid cacheLife() option. Either pass a profile name or object.');
    } else {
        validateCacheLife(profile);
    }
    if (profile.revalidate !== undefined) {
        // Track the explicit revalidate time.
        if (workUnitStore.explicitRevalidate === undefined || workUnitStore.explicitRevalidate > profile.revalidate) {
            workUnitStore.explicitRevalidate = profile.revalidate;
        }
    }
}

//# sourceMappingURL=cache-life.js.map