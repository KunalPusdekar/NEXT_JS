{"version":3,"sources":["../../../src/server/app-render/app-render.tsx"],"sourcesContent":["import type {\n  ActionResult,\n  DynamicParamTypesShort,\n  FlightRouterState,\n  FlightSegmentPath,\n  RenderOpts,\n  Segment,\n  CacheNodeSeedData,\n  PreloadCallbacks,\n  RSCPayload,\n  FlightData,\n  InitialRSCPayload,\n} from './types'\nimport type { WorkStore } from '../app-render/work-async-storage.external'\nimport type { RequestStore } from '../app-render/work-unit-async-storage.external'\nimport type { NextParsedUrlQuery } from '../request-meta'\nimport type { LoaderTree } from '../lib/app-dir-module'\nimport type { AppPageModule } from '../route-modules/app-page/module'\nimport type { ClientReferenceManifest } from '../../build/webpack/plugins/flight-manifest-plugin'\nimport type { DeepReadonly } from '../../shared/lib/deep-readonly'\nimport type { BaseNextRequest, BaseNextResponse } from '../base-http'\nimport type { IncomingHttpHeaders } from 'http'\n\nimport React, { type ErrorInfo, type JSX } from 'react'\n\nimport RenderResult, {\n  type AppPageRenderResultMetadata,\n  type RenderResultOptions,\n} from '../render-result'\nimport {\n  chainStreams,\n  renderToInitialFizzStream,\n  createDocumentClosingStream,\n  continueFizzStream,\n  continueDynamicPrerender,\n  continueStaticPrerender,\n  continueDynamicHTMLResume,\n  streamToBuffer,\n  streamToString,\n} from '../stream-utils/node-web-streams-helper'\nimport { stripInternalQueries } from '../internal-utils'\nimport {\n  NEXT_HMR_REFRESH_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_URL,\n  RSC_HEADER,\n} from '../../client/components/app-router-headers'\nimport {\n  createTrackedMetadataContext,\n  createMetadataContext,\n} from '../../lib/metadata/metadata-context'\nimport { withRequestStore } from '../async-storage/with-request-store'\nimport { withWorkStore } from '../async-storage/with-work-store'\nimport { isNotFoundError } from '../../client/components/not-found'\nimport {\n  getURLFromRedirectError,\n  isRedirectError,\n  getRedirectStatusCodeFromError,\n} from '../../client/components/redirect'\nimport { getImplicitTags } from '../lib/implicit-tags'\nimport { AppRenderSpan, NextNodeServerSpan } from '../lib/trace/constants'\nimport { getTracer } from '../lib/trace/tracer'\nimport { FlightRenderResult } from './flight-render-result'\nimport {\n  createFlightReactServerErrorHandler,\n  createHTMLReactServerErrorHandler,\n  createHTMLErrorHandler,\n  type DigestedError,\n  isUserLandError,\n} from './create-error-handler'\nimport {\n  getShortDynamicParamType,\n  dynamicParamTypes,\n} from './get-short-dynamic-param-type'\nimport { getSegmentParam } from './get-segment-param'\nimport { getScriptNonceFromHeader } from './get-script-nonce-from-header'\nimport { parseAndValidateFlightRouterState } from './parse-and-validate-flight-router-state'\nimport { createFlightRouterStateFromLoaderTree } from './create-flight-router-state-from-loader-tree'\nimport { handleAction } from './action-handler'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { warn, error } from '../../build/output/log'\nimport { appendMutableCookies } from '../web/spec-extension/adapters/request-cookies'\nimport { createServerInsertedHTML } from './server-inserted-html'\nimport { getRequiredScripts } from './required-scripts'\nimport { addPathPrefix } from '../../shared/lib/router/utils/add-path-prefix'\nimport { makeGetServerInsertedHTML } from './make-get-server-inserted-html'\nimport { walkTreeWithFlightRouterState } from './walk-tree-with-flight-router-state'\nimport { createComponentTree } from './create-component-tree'\nimport { getAssetQueryString } from './get-asset-query-string'\nimport { setReferenceManifestsSingleton } from './encryption-utils'\nimport {\n  DynamicState,\n  type PostponedState,\n  parsePostponedState,\n} from './postponed-state'\nimport {\n  getDynamicDataPostponedState,\n  getDynamicHTMLPostponedState,\n  getPostponedFromState,\n} from './postponed-state'\nimport { isDynamicServerError } from '../../client/components/hooks-server-context'\nimport {\n  useFlightStream,\n  createInlinedDataReadableStream,\n} from './use-flight-response'\nimport {\n  StaticGenBailoutError,\n  isStaticGenBailoutError,\n} from '../../client/components/static-generation-bailout'\nimport { getStackWithoutErrorMessage } from '../../lib/format-server-error'\nimport {\n  accessedDynamicData,\n  createPostponedAbortSignal,\n  formatDynamicAPIAccesses,\n  isPrerenderInterruptedError,\n  isRenderInterruptedReason,\n  createDynamicTrackingState,\n  getFirstDynamicReason,\n  trackAllowedDynamicAccess,\n  throwIfDisallowedDynamic,\n  type DynamicTrackingState,\n} from './dynamic-rendering'\nimport {\n  getClientComponentLoaderMetrics,\n  wrapClientComponentLoader,\n} from '../client-component-renderer-logger'\nimport { createServerModuleMap } from './action-utils'\nimport { isNodeNextRequest } from '../base-http/helpers'\nimport { parseParameter } from '../../shared/lib/router/utils/route-regex'\nimport { parseRelativeUrl } from '../../shared/lib/router/utils/parse-relative-url'\nimport AppRouter from '../../client/components/app-router'\nimport type { ServerComponentsHmrCache } from '../response-cache'\nimport type { RequestErrorContext } from '../instrumentation/types'\nimport { getServerActionRequestMetadata } from '../lib/server-action-request-meta'\nimport { createInitialRouterState } from '../../client/components/router-reducer/create-initial-router-state'\nimport { createMutableActionQueue } from '../../shared/lib/router/action-queue'\nimport { getRevalidateReason } from '../instrumentation/utils'\nimport { PAGE_SEGMENT_KEY } from '../../shared/lib/segment'\nimport type { FallbackRouteParams } from '../request/fallback-params'\nimport { DynamicServerError } from '../../client/components/hooks-server-context'\nimport {\n  type ReactServerPrerenderResolveToType,\n  type ReactServerPrerenderResult,\n  ReactServerResult,\n  createReactServerPrerenderResult,\n  createReactServerPrerenderResultFromRender,\n  prerenderAndAbortInSequentialTasks,\n} from '../app-render/app-render-prerender-utils'\nimport { waitAtLeastOneReactRenderTask } from '../../lib/scheduler'\nimport {\n  workUnitAsyncStorage,\n  type PrerenderStore,\n} from './work-unit-async-storage.external'\nimport { CacheSignal } from './cache-signal'\nimport { getTracedMetadata } from '../lib/trace/utils'\n\nimport './clean-async-snapshot.external'\nimport { INFINITE_CACHE } from '../../lib/constants'\n\nexport type GetDynamicParamFromSegment = (\n  // [slug] / [[slug]] / [...slug]\n  segment: string\n) => {\n  param: string\n  value: string | string[] | null\n  treeSegment: Segment\n  type: DynamicParamTypesShort\n} | null\n\nexport type GenerateFlight = typeof generateDynamicFlightRenderResult\n\nexport type AppRenderContext = {\n  workStore: WorkStore\n  requestStore: RequestStore\n  componentMod: AppPageModule\n  renderOpts: RenderOpts\n  parsedRequestHeaders: ParsedRequestHeaders\n  getDynamicParamFromSegment: GetDynamicParamFromSegment\n  query: NextParsedUrlQuery\n  isPrefetch: boolean\n  isAction: boolean\n  requestTimestamp: number\n  appUsingSizeAdjustment: boolean\n  flightRouterState?: FlightRouterState\n  requestId: string\n  pagePath: string\n  clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n  assetPrefix: string\n  isNotFoundPath: boolean\n  nonce: string | undefined\n  res: BaseNextResponse\n}\n\ninterface ParseRequestHeadersOptions {\n  readonly isRoutePPREnabled: boolean\n}\n\nconst flightDataPathHeadKey = 'h'\n\ninterface ParsedRequestHeaders {\n  /**\n   * Router state provided from the client-side router. Used to handle rendering\n   * from the common layout down. This value will be undefined if the request is\n   * not a client-side navigation request, or if the request is a prefetch\n   * request.\n   */\n  readonly flightRouterState: FlightRouterState | undefined\n  readonly isPrefetchRequest: boolean\n  readonly isHmrRefresh: boolean\n  readonly isRSCRequest: boolean\n  readonly nonce: string | undefined\n}\n\nfunction parseRequestHeaders(\n  headers: IncomingHttpHeaders,\n  options: ParseRequestHeadersOptions\n): ParsedRequestHeaders {\n  const isPrefetchRequest =\n    headers[NEXT_ROUTER_PREFETCH_HEADER.toLowerCase()] !== undefined\n\n  const isHmrRefresh =\n    headers[NEXT_HMR_REFRESH_HEADER.toLowerCase()] !== undefined\n\n  const isRSCRequest = headers[RSC_HEADER.toLowerCase()] !== undefined\n\n  const shouldProvideFlightRouterState =\n    isRSCRequest && (!isPrefetchRequest || !options.isRoutePPREnabled)\n\n  const flightRouterState = shouldProvideFlightRouterState\n    ? parseAndValidateFlightRouterState(\n        headers[NEXT_ROUTER_STATE_TREE_HEADER.toLowerCase()]\n      )\n    : undefined\n\n  const csp =\n    headers['content-security-policy'] ||\n    headers['content-security-policy-report-only']\n\n  const nonce =\n    typeof csp === 'string' ? getScriptNonceFromHeader(csp) : undefined\n\n  return {\n    flightRouterState,\n    isPrefetchRequest,\n    isHmrRefresh,\n    isRSCRequest,\n    nonce,\n  }\n}\n\nfunction createNotFoundLoaderTree(loaderTree: LoaderTree): LoaderTree {\n  // Align the segment with parallel-route-default in next-app-loader\n  const components = loaderTree[2]\n  return [\n    '',\n    {\n      children: [\n        PAGE_SEGMENT_KEY,\n        {},\n        {\n          page: components['not-found'],\n        },\n      ],\n    },\n    components,\n  ]\n}\n\nexport type CreateSegmentPath = (child: FlightSegmentPath) => FlightSegmentPath\n\n/**\n * Returns a function that parses the dynamic segment and return the associated value.\n */\nfunction makeGetDynamicParamFromSegment(\n  params: { [key: string]: any },\n  pagePath: string,\n  fallbackRouteParams: FallbackRouteParams | null\n): GetDynamicParamFromSegment {\n  return function getDynamicParamFromSegment(\n    // [slug] / [[slug]] / [...slug]\n    segment: string\n  ) {\n    const segmentParam = getSegmentParam(segment)\n    if (!segmentParam) {\n      return null\n    }\n\n    const key = segmentParam.param\n\n    let value = params[key]\n\n    if (fallbackRouteParams && fallbackRouteParams.has(segmentParam.param)) {\n      value = fallbackRouteParams.get(segmentParam.param)\n    } else if (Array.isArray(value)) {\n      value = value.map((i) => encodeURIComponent(i))\n    } else if (typeof value === 'string') {\n      value = encodeURIComponent(value)\n    }\n\n    if (!value) {\n      const isCatchall = segmentParam.type === 'catchall'\n      const isOptionalCatchall = segmentParam.type === 'optional-catchall'\n\n      if (isCatchall || isOptionalCatchall) {\n        const dynamicParamType = dynamicParamTypes[segmentParam.type]\n        // handle the case where an optional catchall does not have a value,\n        // e.g. `/dashboard/[[...slug]]` when requesting `/dashboard`\n        if (isOptionalCatchall) {\n          return {\n            param: key,\n            value: null,\n            type: dynamicParamType,\n            treeSegment: [key, '', dynamicParamType],\n          }\n        }\n\n        // handle the case where a catchall or optional catchall does not have a value,\n        // e.g. `/foo/bar/hello` and `@slot/[...catchall]` or `@slot/[[...catchall]]` is matched\n        value = pagePath\n          .split('/')\n          // remove the first empty string\n          .slice(1)\n          // replace any dynamic params with the actual values\n          .flatMap((pathSegment) => {\n            const param = parseParameter(pathSegment)\n            // if the segment matches a param, return the param value\n            // otherwise, it's a static segment, so just return that\n            return params[param.key] ?? param.key\n          })\n\n        return {\n          param: key,\n          value,\n          type: dynamicParamType,\n          // This value always has to be a string.\n          treeSegment: [key, value.join('/'), dynamicParamType],\n        }\n      }\n    }\n\n    const type = getShortDynamicParamType(segmentParam.type)\n\n    return {\n      param: key,\n      // The value that is passed to user code.\n      value: value,\n      // The value that is rendered in the router tree.\n      treeSegment: [key, Array.isArray(value) ? value.join('/') : value, type],\n      type: type,\n    }\n  }\n}\n\nfunction NonIndex({ ctx }: { ctx: AppRenderContext }) {\n  const is404Page = ctx.pagePath === '/404'\n  const isInvalidStatusCode =\n    typeof ctx.res.statusCode === 'number' && ctx.res.statusCode > 400\n\n  if (is404Page || isInvalidStatusCode) {\n    return <meta name=\"robots\" content=\"noindex\" />\n  }\n  return null\n}\n\n/**\n * This is used by server actions & client-side navigations to generate RSC data from a client-side request.\n * This function is only called on \"dynamic\" requests (ie, there wasn't already a static response).\n * It uses request headers (namely `Next-Router-State-Tree`) to determine where to start rendering.\n */\nasync function generateDynamicRSCPayload(\n  ctx: AppRenderContext,\n  options?: {\n    actionResult: ActionResult\n    skipFlight: boolean\n  }\n): Promise<RSCPayload> {\n  ctx.requestStore.phase = 'render'\n  // Flight data that is going to be passed to the browser.\n  // Currently a single item array but in the future multiple patches might be combined in a single request.\n\n  // We initialize `flightData` to an empty string because the client router knows how to tolerate\n  // it (treating it as an MPA navigation). The only time this function wouldn't generate flight data\n  // is for server actions, if the server action handler instructs this function to skip it. When the server\n  // action reducer sees a falsy value, it'll simply resolve the action with no data.\n  let flightData: FlightData = ''\n\n  const {\n    componentMod: {\n      tree: loaderTree,\n      createServerSearchParamsForMetadata,\n      createServerParamsForMetadata,\n      createMetadataComponents,\n      MetadataBoundary,\n      ViewportBoundary,\n    },\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    requestStore: { url },\n    query,\n    requestId,\n    flightRouterState,\n    workStore,\n  } = ctx\n\n  if (!options?.skipFlight) {\n    const preloadCallbacks: PreloadCallbacks = []\n\n    const searchParams = createServerSearchParamsForMetadata(query, workStore)\n    const [MetadataTree, getMetadataReady] = createMetadataComponents({\n      tree: loaderTree,\n      searchParams,\n      metadataContext: createTrackedMetadataContext(\n        url.pathname,\n        ctx.renderOpts,\n        workStore\n      ),\n      getDynamicParamFromSegment,\n      appUsingSizeAdjustment,\n      createServerParamsForMetadata,\n      workStore,\n      MetadataBoundary,\n      ViewportBoundary,\n    })\n    flightData = (\n      await walkTreeWithFlightRouterState({\n        ctx,\n        createSegmentPath: (child) => child,\n        loaderTreeToFilter: loaderTree,\n        parentParams: {},\n        flightRouterState,\n        isFirst: true,\n        // For flight, render metadata inside leaf page\n        rscPayloadHead: (\n          <React.Fragment key={flightDataPathHeadKey}>\n            <NonIndex ctx={ctx} />\n            {/* Adding requestId as react key to make metadata remount for each render */}\n            <MetadataTree key={requestId} />\n          </React.Fragment>\n        ),\n        injectedCSS: new Set(),\n        injectedJS: new Set(),\n        injectedFontPreloadTags: new Set(),\n        rootLayoutIncluded: false,\n        getMetadataReady,\n        preloadCallbacks,\n      })\n    ).map((path) => path.slice(1)) // remove the '' (root) segment\n  }\n\n  // If we have an action result, then this is a server action response.\n  // We can rely on this because `ActionResult` will always be a promise, even if\n  // the result is falsey.\n  if (options?.actionResult) {\n    return {\n      a: options.actionResult,\n      f: flightData,\n      b: ctx.renderOpts.buildId,\n    }\n  }\n\n  // Otherwise, it's a regular RSC response.\n  return {\n    b: ctx.renderOpts.buildId,\n    f: flightData,\n    S: workStore.isStaticGeneration,\n  }\n}\n\nfunction createErrorContext(\n  ctx: AppRenderContext,\n  renderSource: RequestErrorContext['renderSource']\n): RequestErrorContext {\n  return {\n    routerKind: 'App Router',\n    routePath: ctx.pagePath,\n    routeType: ctx.isAction ? 'action' : 'render',\n    renderSource,\n    revalidateReason: getRevalidateReason(ctx.workStore),\n  }\n}\n/**\n * Produces a RenderResult containing the Flight data for the given request. See\n * `generateDynamicRSCPayload` for information on the contents of the render result.\n */\nasync function generateDynamicFlightRenderResult(\n  req: BaseNextRequest,\n  ctx: AppRenderContext,\n  options?: {\n    actionResult: ActionResult\n    skipFlight: boolean\n    componentTree?: CacheNodeSeedData\n    preloadCallbacks?: PreloadCallbacks\n  }\n): Promise<RenderResult> {\n  const renderOpts = ctx.renderOpts\n\n  function onFlightDataRenderError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components-payload')\n    )\n  }\n  const onError = createFlightReactServerErrorHandler(\n    !!renderOpts.dev,\n    onFlightDataRenderError\n  )\n\n  const rscPayload = await generateDynamicRSCPayload(ctx, options)\n\n  // For app dir, use the bundled version of Flight server renderer (renderToReadableStream)\n  // which contains the subset React.\n  const flightReadableStream = ctx.componentMod.renderToReadableStream(\n    rscPayload,\n    ctx.clientReferenceManifest.clientModules,\n    {\n      onError,\n    }\n  )\n\n  return new FlightRenderResult(flightReadableStream, {\n    fetchMetrics: ctx.workStore.fetchMetrics,\n  })\n}\n\n/**\n * Crawlers will inadvertently think the canonicalUrl in the RSC payload should be crawled\n * when our intention is to just seed the router state with the current URL.\n * This function splits up the pathname so that we can later join it on\n * when we're ready to consume the path.\n */\nfunction prepareInitialCanonicalUrl(url: RequestStore['url']) {\n  return (url.pathname + url.search).split('/')\n}\n\n// This is the data necessary to render <AppRouter /> when no SSR errors are encountered\nasync function getRSCPayload(\n  tree: LoaderTree,\n  ctx: AppRenderContext,\n  is404: boolean\n): Promise<InitialRSCPayload & { P: React.ReactNode }> {\n  const injectedCSS = new Set<string>()\n  const injectedJS = new Set<string>()\n  const injectedFontPreloadTags = new Set<string>()\n  let missingSlots: Set<string> | undefined\n\n  // We only track missing parallel slots in development\n  if (process.env.NODE_ENV === 'development') {\n    missingSlots = new Set<string>()\n  }\n\n  const {\n    getDynamicParamFromSegment,\n    query,\n    appUsingSizeAdjustment,\n    componentMod: {\n      GlobalError,\n      createServerSearchParamsForMetadata,\n      createServerParamsForMetadata,\n      createMetadataComponents,\n      MetadataBoundary,\n      ViewportBoundary,\n    },\n    requestStore: { url },\n    workStore,\n  } = ctx\n  const initialTree = createFlightRouterStateFromLoaderTree(\n    tree,\n    getDynamicParamFromSegment,\n    query\n  )\n\n  const searchParams = createServerSearchParamsForMetadata(query, workStore)\n  const [MetadataTree, getMetadataReady] = createMetadataComponents({\n    tree,\n    errorType: is404 ? 'not-found' : undefined,\n    searchParams,\n    metadataContext: createTrackedMetadataContext(\n      url.pathname,\n      ctx.renderOpts,\n      workStore\n    ),\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    createServerParamsForMetadata,\n    workStore,\n    MetadataBoundary,\n    ViewportBoundary,\n  })\n\n  const preloadCallbacks: PreloadCallbacks = []\n\n  const seedData = await createComponentTree({\n    ctx,\n    createSegmentPath: (child) => child,\n    loaderTree: tree,\n    parentParams: {},\n    firstItem: true,\n    injectedCSS,\n    injectedJS,\n    injectedFontPreloadTags,\n    rootLayoutIncluded: false,\n    getMetadataReady,\n    missingSlots,\n    preloadCallbacks,\n  })\n\n  // When the `vary` response header is present with `Next-URL`, that means there's a chance\n  // it could respond differently if there's an interception route. We provide this information\n  // to `AppRouter` so that it can properly seed the prefetch cache with a prefix, if needed.\n  const varyHeader = ctx.res.getHeader('vary')\n  const couldBeIntercepted =\n    typeof varyHeader === 'string' && varyHeader.includes(NEXT_URL)\n\n  const initialHead = (\n    <React.Fragment key={flightDataPathHeadKey}>\n      <NonIndex ctx={ctx} />\n      {/* Adding requestId as react key to make metadata remount for each render */}\n      <MetadataTree key={ctx.requestId} />\n    </React.Fragment>\n  )\n\n  return {\n    // See the comment above the `Preloads` component (below) for why this is part of the payload\n    P: <Preloads preloadCallbacks={preloadCallbacks} />,\n    b: ctx.renderOpts.buildId,\n    p: ctx.assetPrefix,\n    c: prepareInitialCanonicalUrl(url),\n    i: !!couldBeIntercepted,\n    f: [[initialTree, seedData, initialHead]],\n    m: missingSlots,\n    G: GlobalError,\n    s: typeof ctx.renderOpts.postponed === 'string',\n    S: workStore.isStaticGeneration,\n  }\n}\n\n/**\n * Preload calls (such as `ReactDOM.preloadStyle` and `ReactDOM.preloadFont`) need to be called during rendering\n * in order to create the appropriate preload tags in the DOM, otherwise they're a no-op. Since we invoke\n * renderToReadableStream with a function that returns component props rather than a component itself, we use\n * this component to \"render  \" the preload calls.\n */\nfunction Preloads({ preloadCallbacks }: { preloadCallbacks: Function[] }) {\n  preloadCallbacks.forEach((preloadFn) => preloadFn())\n  return null\n}\n\n// This is the data necessary to render <AppRouter /> when an error state is triggered\nasync function getErrorRSCPayload(\n  tree: LoaderTree,\n  ctx: AppRenderContext,\n  errorType: 'not-found' | 'redirect' | undefined\n) {\n  const {\n    getDynamicParamFromSegment,\n    query,\n    appUsingSizeAdjustment,\n    componentMod: {\n      GlobalError,\n      createServerSearchParamsForMetadata,\n      createServerParamsForMetadata,\n      createMetadataComponents,\n      MetadataBoundary,\n      ViewportBoundary,\n    },\n    requestStore: { url },\n    requestId,\n    workStore,\n  } = ctx\n\n  const searchParams = createServerSearchParamsForMetadata(query, workStore)\n  const [MetadataTree] = createMetadataComponents({\n    tree,\n    searchParams,\n    // We create an untracked metadata context here because we can't postpone\n    // again during the error render.\n    metadataContext: createMetadataContext(url.pathname, ctx.renderOpts),\n    errorType,\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    createServerParamsForMetadata,\n    workStore,\n    MetadataBoundary,\n    ViewportBoundary,\n  })\n\n  const initialHead = (\n    <React.Fragment key={flightDataPathHeadKey}>\n      <NonIndex ctx={ctx} />\n      {/* Adding requestId as react key to make metadata remount for each render */}\n      <MetadataTree key={requestId} />\n      {process.env.NODE_ENV === 'development' && (\n        <meta name=\"next-error\" content=\"not-found\" />\n      )}\n    </React.Fragment>\n  )\n\n  const initialTree = createFlightRouterStateFromLoaderTree(\n    tree,\n    getDynamicParamFromSegment,\n    query\n  )\n\n  // For metadata notFound error there's no global not found boundary on top\n  // so we create a not found page with AppRouter\n  const initialSeedData: CacheNodeSeedData = [\n    initialTree[0],\n    <html id=\"__next_error__\">\n      <head></head>\n      <body></body>\n    </html>,\n    {},\n    null,\n  ]\n\n  return {\n    b: ctx.renderOpts.buildId,\n    p: ctx.assetPrefix,\n    c: prepareInitialCanonicalUrl(url),\n    m: undefined,\n    i: false,\n    f: [[initialTree, initialSeedData, initialHead]],\n    G: GlobalError,\n    s: typeof ctx.renderOpts.postponed === 'string',\n    S: workStore.isStaticGeneration,\n  } satisfies InitialRSCPayload\n}\n\n// This component must run in an SSR context. It will render the RSC root component\nfunction App<T>({\n  reactServerStream,\n  preinitScripts,\n  clientReferenceManifest,\n  nonce,\n  ServerInsertedHTMLProvider,\n}: {\n  reactServerStream: BinaryStreamOf<T>\n  preinitScripts: () => void\n  clientReferenceManifest: NonNullable<RenderOpts['clientReferenceManifest']>\n  ServerInsertedHTMLProvider: React.ComponentType<{ children: JSX.Element }>\n  nonce?: string\n}): JSX.Element {\n  preinitScripts()\n  const response = React.use(\n    useFlightStream<InitialRSCPayload>(\n      reactServerStream,\n      clientReferenceManifest,\n      nonce\n    )\n  )\n\n  const initialState = createInitialRouterState({\n    buildId: response.b,\n    initialFlightData: response.f,\n    initialCanonicalUrlParts: response.c,\n    // location and initialParallelRoutes are not initialized in the SSR render\n    // they are set to an empty map and window.location, respectively during hydration\n    initialParallelRoutes: null!,\n    location: null,\n    couldBeIntercepted: response.i,\n    postponed: response.s,\n    prerendered: response.S,\n  })\n\n  const actionQueue = createMutableActionQueue(initialState)\n\n  const { HeadManagerContext } =\n    require('../../shared/lib/head-manager-context.shared-runtime') as typeof import('../../shared/lib/head-manager-context.shared-runtime')\n\n  return (\n    <HeadManagerContext.Provider\n      value={{\n        appDir: true,\n        nonce,\n      }}\n    >\n      <ServerInsertedHTMLProvider>\n        <AppRouter\n          actionQueue={actionQueue}\n          globalErrorComponent={response.G}\n          assetPrefix={response.p}\n        />\n      </ServerInsertedHTMLProvider>\n    </HeadManagerContext.Provider>\n  )\n}\n\n// @TODO our error stream should be probably just use the same root component. But it was previously\n// different I don't want to figure out if that is meaningful at this time so just keeping the behavior\n// consistent for now.\nfunction AppWithoutContext<T>({\n  reactServerStream,\n  preinitScripts,\n  clientReferenceManifest,\n  nonce,\n}: {\n  reactServerStream: BinaryStreamOf<T>\n  preinitScripts: () => void\n  clientReferenceManifest: NonNullable<RenderOpts['clientReferenceManifest']>\n  nonce?: string\n}): JSX.Element {\n  preinitScripts()\n  const response = React.use(\n    useFlightStream<InitialRSCPayload>(\n      reactServerStream,\n      clientReferenceManifest,\n      nonce\n    )\n  )\n\n  const initialState = createInitialRouterState({\n    buildId: response.b,\n    initialFlightData: response.f,\n    initialCanonicalUrlParts: response.c,\n    // location and initialParallelRoutes are not initialized in the SSR render\n    // they are set to an empty map and window.location, respectively during hydration\n    initialParallelRoutes: null!,\n    location: null,\n    couldBeIntercepted: response.i,\n    postponed: response.s,\n    prerendered: response.S,\n  })\n\n  const actionQueue = createMutableActionQueue(initialState)\n\n  return (\n    <AppRouter\n      actionQueue={actionQueue}\n      globalErrorComponent={response.G}\n      assetPrefix={response.p}\n    />\n  )\n}\n\n// We use a trick with TS Generics to branch streams with a type so we can\n// consume the parsed value of a Readable Stream if it was constructed with a\n// certain object shape. The generic type is not used directly in the type so it\n// requires a disabling of the eslint rule disallowing unused vars\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport type BinaryStreamOf<T> = ReadableStream<Uint8Array>\n\nasync function renderToHTMLOrFlightImpl(\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  pagePath: string,\n  query: NextParsedUrlQuery,\n  renderOpts: RenderOpts,\n  requestStore: RequestStore,\n  workStore: WorkStore,\n  parsedRequestHeaders: ParsedRequestHeaders,\n  requestEndedState: { ended?: boolean },\n  postponedState: PostponedState | null\n) {\n  const isNotFoundPath = pagePath === '/404'\n  if (isNotFoundPath) {\n    res.statusCode = 404\n  }\n\n  // A unique request timestamp used by development to ensure that it's\n  // consistent and won't change during this request. This is important to\n  // avoid that resources can be deduped by React Float if the same resource is\n  // rendered or preloaded multiple times: `<link href=\"a.css?v={Date.now()}\"/>`.\n  const requestTimestamp = Date.now()\n\n  const {\n    serverActionsManifest,\n    ComponentMod,\n    nextFontManifest,\n    serverActions,\n    assetPrefix = '',\n    enableTainting,\n  } = renderOpts\n\n  // We need to expose the bundled `require` API globally for\n  // react-server-dom-webpack. This is a hack until we find a better way.\n  if (ComponentMod.__next_app__) {\n    const instrumented = wrapClientComponentLoader(ComponentMod)\n    // @ts-ignore\n    globalThis.__next_require__ = instrumented.require\n    // When we are prerendering if there is a cacheSignal for tracking\n    // cache reads we wrap the loadChunk in this tracking. This allows us\n    // to treat chunk loading with similar semantics as cache reads to avoid\n    // async loading chunks from causing a prerender to abort too early.\n    // @ts-ignore\n    globalThis.__next_chunk_load__ = (...args: Array<any>) => {\n      const loadingChunk = instrumented.loadChunk(...args)\n      trackChunkLoading(loadingChunk)\n      return loadingChunk\n    }\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    // reset isr status at start of request\n    const { pathname } = new URL(req.url || '/', 'http://n')\n    renderOpts.setAppIsrStatus?.(pathname, null)\n  }\n\n  if (\n    // The type check here ensures that `req` is correctly typed, and the\n    // environment variable check provides dead code elimination.\n    process.env.NEXT_RUNTIME !== 'edge' &&\n    isNodeNextRequest(req)\n  ) {\n    req.originalRequest.on('end', () => {\n      const prerenderStore = workUnitAsyncStorage.getStore()\n      const isPPR =\n        prerenderStore &&\n        (prerenderStore.type === 'prerender' ||\n          prerenderStore.type === 'prerender-ppr')\n          ? !!prerenderStore.dynamicTracking?.dynamicAccesses?.length\n          : false\n\n      if (\n        process.env.NODE_ENV === 'development' &&\n        renderOpts.setAppIsrStatus &&\n        !isPPR &&\n        !requestStore.usedDynamic\n      ) {\n        // only node can be ISR so we only need to update the status here\n        const { pathname } = new URL(req.url || '/', 'http://n')\n        renderOpts.setAppIsrStatus(pathname, true)\n      }\n\n      requestEndedState.ended = true\n\n      if ('performance' in globalThis) {\n        const metrics = getClientComponentLoaderMetrics({ reset: true })\n        if (metrics) {\n          getTracer()\n            .startSpan(NextNodeServerSpan.clientComponentLoading, {\n              startTime: metrics.clientComponentLoadStart,\n              attributes: {\n                'next.clientComponentLoadCount':\n                  metrics.clientComponentLoadCount,\n                'next.span_type': NextNodeServerSpan.clientComponentLoading,\n              },\n            })\n            .end(\n              metrics.clientComponentLoadStart +\n                metrics.clientComponentLoadTimes\n            )\n        }\n      }\n    })\n  }\n\n  const metadata: AppPageRenderResultMetadata = {}\n\n  const appUsingSizeAdjustment = !!nextFontManifest?.appUsingSizeAdjust\n\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n\n  const serverModuleMap = createServerModuleMap({\n    serverActionsManifest,\n    pageName: renderOpts.page,\n  })\n\n  setReferenceManifestsSingleton({\n    clientReferenceManifest,\n    serverActionsManifest,\n    serverModuleMap,\n  })\n\n  ComponentMod.patchFetch()\n\n  // Pull out the hooks/references from the component.\n  const { tree: loaderTree, taintObjectReference } = ComponentMod\n\n  if (enableTainting) {\n    taintObjectReference(\n      'Do not pass process.env to client components since it will leak sensitive data',\n      process.env\n    )\n  }\n\n  workStore.fetchMetrics = []\n  metadata.fetchMetrics = workStore.fetchMetrics\n\n  // don't modify original query object\n  query = { ...query }\n  stripInternalQueries(query)\n\n  const { flightRouterState, isPrefetchRequest, isRSCRequest, nonce } =\n    parsedRequestHeaders\n\n  /**\n   * The metadata items array created in next-app-loader with all relevant information\n   * that we need to resolve the final metadata.\n   */\n  let requestId: string\n\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    requestId = crypto.randomUUID()\n  } else {\n    requestId = require('next/dist/compiled/nanoid').nanoid()\n  }\n\n  /**\n   * Dynamic parameters. E.g. when you visit `/dashboard/vercel` which is rendered by `/dashboard/[slug]` the value will be {\"slug\": \"vercel\"}.\n   */\n  const params = renderOpts.params ?? {}\n\n  const { isStaticGeneration, fallbackRouteParams } = workStore\n\n  const getDynamicParamFromSegment = makeGetDynamicParamFromSegment(\n    params,\n    pagePath,\n    fallbackRouteParams\n  )\n\n  const isActionRequest = getServerActionRequestMetadata(req).isServerAction\n\n  const ctx: AppRenderContext = {\n    componentMod: ComponentMod,\n    renderOpts,\n    requestStore,\n    workStore,\n    parsedRequestHeaders,\n    getDynamicParamFromSegment,\n    query,\n    isPrefetch: isPrefetchRequest,\n    isAction: isActionRequest,\n    requestTimestamp,\n    appUsingSizeAdjustment,\n    flightRouterState,\n    requestId,\n    pagePath,\n    clientReferenceManifest,\n    assetPrefix,\n    isNotFoundPath,\n    nonce,\n    res,\n  }\n\n  getTracer().setRootSpanAttribute('next.route', pagePath)\n\n  if (isStaticGeneration) {\n    // We're either building or revalidating. In either case we need to\n    // prerender our page rather than render it.\n    const prerenderToStreamWithTracing = getTracer().wrap(\n      AppRenderSpan.getBodyResult,\n      {\n        spanName: `prerender route (app) ${pagePath}`,\n        attributes: {\n          'next.route': pagePath,\n        },\n      },\n      prerenderToStream\n    )\n\n    let response = await prerenderToStreamWithTracing(\n      req,\n      res,\n      ctx,\n      metadata,\n      workStore,\n      loaderTree\n    )\n\n    // If we're debugging partial prerendering, print all the dynamic API accesses\n    // that occurred during the render.\n    // @TODO move into renderToStream function\n    if (\n      response.dynamicTracking &&\n      accessedDynamicData(response.dynamicTracking) &&\n      response.dynamicTracking.isDebugDynamicAccesses\n    ) {\n      warn('The following dynamic usage was detected:')\n      for (const access of formatDynamicAPIAccesses(response.dynamicTracking)) {\n        warn(access)\n      }\n    }\n\n    // If we encountered any unexpected errors during build we fail the\n    // prerendering phase and the build.\n    if (response.digestErrorsMap.size) {\n      const buildFailingError = response.digestErrorsMap.values().next().value\n      if (buildFailingError) throw buildFailingError\n    }\n    // Pick first userland SSR error, which is also not a RSC error.\n    if (response.ssrErrors.length) {\n      const buildFailingError = response.ssrErrors.find((err) =>\n        isUserLandError(err)\n      )\n      if (buildFailingError) throw buildFailingError\n    }\n\n    const options: RenderResultOptions = {\n      metadata,\n    }\n    // If we have pending revalidates, wait until they are all resolved.\n    if (\n      workStore.pendingRevalidates ||\n      workStore.pendingRevalidateWrites ||\n      workStore.revalidatedTags\n    ) {\n      options.waitUntil = Promise.all([\n        workStore.incrementalCache?.revalidateTag(\n          workStore.revalidatedTags || []\n        ),\n        ...Object.values(workStore.pendingRevalidates || {}),\n        ...(workStore.pendingRevalidateWrites || []),\n      ])\n    }\n\n    if (response.collectedTags) {\n      metadata.fetchTags = response.collectedTags.join(',')\n    }\n\n    // If force static is specifically set to false, we should not revalidate\n    // the page.\n    if (workStore.forceStatic === false || response.collectedRevalidate === 0) {\n      metadata.revalidate = 0\n    } else {\n      // Copy the revalidation value onto the render result metadata.\n      metadata.revalidate =\n        response.collectedRevalidate >= INFINITE_CACHE\n          ? false\n          : response.collectedRevalidate\n    }\n\n    // provide bailout info for debugging\n    if (metadata.revalidate === 0) {\n      metadata.staticBailoutInfo = {\n        description: workStore.dynamicUsageDescription,\n        stack: workStore.dynamicUsageStack,\n      }\n    }\n\n    return new RenderResult(await streamToString(response.stream), options)\n  } else {\n    // We're rendering dynamically\n    if (isRSCRequest) {\n      return generateDynamicFlightRenderResult(req, ctx)\n    }\n\n    const renderToStreamWithTracing = getTracer().wrap(\n      AppRenderSpan.getBodyResult,\n      {\n        spanName: `render route (app) ${pagePath}`,\n        attributes: {\n          'next.route': pagePath,\n        },\n      },\n      renderToStream\n    )\n\n    let formState: null | any = null\n    if (isActionRequest) {\n      // For action requests, we handle them differently with a special render result.\n      const actionRequestResult = await handleAction({\n        req,\n        res,\n        ComponentMod,\n        serverModuleMap,\n        generateFlight: generateDynamicFlightRenderResult,\n        workStore,\n        requestStore,\n        serverActions,\n        ctx,\n      })\n\n      if (actionRequestResult) {\n        if (actionRequestResult.type === 'not-found') {\n          const notFoundLoaderTree = createNotFoundLoaderTree(loaderTree)\n          res.statusCode = 404\n          const stream = await renderToStreamWithTracing(\n            req,\n            res,\n            ctx,\n            notFoundLoaderTree,\n            formState,\n            postponedState\n          )\n\n          return new RenderResult(stream, { metadata })\n        } else if (actionRequestResult.type === 'done') {\n          if (actionRequestResult.result) {\n            actionRequestResult.result.assignMetadata(metadata)\n            return actionRequestResult.result\n          } else if (actionRequestResult.formState) {\n            formState = actionRequestResult.formState\n          }\n        }\n      }\n    }\n\n    const options: RenderResultOptions = {\n      metadata,\n    }\n\n    const stream = await renderToStreamWithTracing(\n      req,\n      res,\n      ctx,\n      loaderTree,\n      formState,\n      postponedState\n    )\n\n    // If we have pending revalidates, wait until they are all resolved.\n    if (\n      workStore.pendingRevalidates ||\n      workStore.pendingRevalidateWrites ||\n      workStore.revalidatedTags\n    ) {\n      options.waitUntil = Promise.all([\n        workStore.incrementalCache?.revalidateTag(\n          workStore.revalidatedTags || []\n        ),\n        ...Object.values(workStore.pendingRevalidates || {}),\n        ...(workStore.pendingRevalidateWrites || []),\n      ])\n    }\n\n    // Create the new render result for the response.\n    return new RenderResult(stream, options)\n  }\n}\n\nexport type AppPageRender = (\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  pagePath: string,\n  query: NextParsedUrlQuery,\n  fallbackRouteParams: FallbackRouteParams | null,\n  renderOpts: RenderOpts,\n  serverComponentsHmrCache?: ServerComponentsHmrCache\n) => Promise<RenderResult<AppPageRenderResultMetadata>>\n\nexport const renderToHTMLOrFlight: AppPageRender = (\n  req,\n  res,\n  pagePath,\n  query,\n  fallbackRouteParams,\n  renderOpts,\n  serverComponentsHmrCache\n) => {\n  if (!req.url) {\n    throw new Error('Invalid URL')\n  }\n\n  const url = parseRelativeUrl(req.url, undefined, false)\n\n  // We read these values from the request object as, in certain cases,\n  // base-server will strip them to opt into different rendering behavior.\n  const parsedRequestHeaders = parseRequestHeaders(req.headers, {\n    isRoutePPREnabled: renderOpts.experimental.isRoutePPREnabled === true,\n  })\n\n  const { isHmrRefresh } = parsedRequestHeaders\n\n  const requestEndedState = { ended: false }\n  let postponedState: PostponedState | null = null\n\n  // If provided, the postpone state should be parsed so it can be provided to\n  // React.\n  if (typeof renderOpts.postponed === 'string') {\n    if (fallbackRouteParams && fallbackRouteParams.size > 0) {\n      throw new Error(\n        'Invariant: postponed state should not be provided when fallback params are provided'\n      )\n    }\n\n    postponedState = parsePostponedState(\n      renderOpts.postponed,\n      renderOpts.params\n    )\n  }\n\n  const implicitTags = getImplicitTags(\n    renderOpts.routeModule.definition.page,\n    url,\n    fallbackRouteParams\n  )\n\n  return withRequestStore(\n    renderOpts.ComponentMod.workUnitAsyncStorage,\n    {\n      req,\n      url,\n      res,\n      phase: 'render',\n      renderOpts,\n      isHmrRefresh,\n      serverComponentsHmrCache,\n      implicitTags,\n    },\n    (requestStore) => {\n      if (requestStore.type !== 'request') {\n        // TODO: Refactor to not need a RequestStore for prerenders.\n        throw new Error('This should never happen.')\n      }\n      return withWorkStore(\n        renderOpts.ComponentMod.workAsyncStorage,\n        {\n          page: renderOpts.routeModule.definition.page,\n          fallbackRouteParams,\n          renderOpts,\n          requestEndedState,\n          isPrefetchRequest: Boolean(req.headers[NEXT_ROUTER_PREFETCH_HEADER]),\n        },\n        (workStore) =>\n          renderToHTMLOrFlightImpl(\n            req,\n            res,\n            pagePath,\n            query,\n            renderOpts,\n            requestStore,\n            workStore,\n            parsedRequestHeaders,\n            requestEndedState,\n            postponedState\n          )\n      )\n    }\n  )\n}\n\nasync function renderToStream(\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  ctx: AppRenderContext,\n  tree: LoaderTree,\n  formState: any,\n  postponedState: PostponedState | null\n): Promise<ReadableStream<Uint8Array>> {\n  const renderOpts = ctx.renderOpts\n  const ComponentMod = renderOpts.ComponentMod\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n\n  const { ServerInsertedHTMLProvider, renderServerInsertedHTML } =\n    createServerInsertedHTML()\n\n  const tracingMetadata = getTracedMetadata(\n    getTracer().getTracePropagationData(),\n    renderOpts.experimental.clientTraceMetadata\n  )\n\n  const polyfills: JSX.IntrinsicElements['script'][] =\n    renderOpts.buildManifest.polyfillFiles\n      .filter(\n        (polyfill) =>\n          polyfill.endsWith('.js') && !polyfill.endsWith('.module.js')\n      )\n      .map((polyfill) => ({\n        src: `${ctx.assetPrefix}/_next/${polyfill}${getAssetQueryString(\n          ctx,\n          false\n        )}`,\n        integrity: renderOpts.subresourceIntegrityManifest?.[polyfill],\n        crossOrigin: renderOpts.crossOrigin,\n        noModule: true,\n        nonce: ctx.nonce,\n      }))\n\n  const [preinitScripts, bootstrapScript] = getRequiredScripts(\n    renderOpts.buildManifest,\n    // Why is assetPrefix optional on renderOpts?\n    // @TODO make it default empty string on renderOpts and get rid of it from ctx\n    ctx.assetPrefix,\n    renderOpts.crossOrigin,\n    renderOpts.subresourceIntegrityManifest,\n    getAssetQueryString(ctx, true),\n    ctx.nonce,\n    renderOpts.page\n  )\n\n  const reactServerErrorsByDigest: Map<string, DigestedError> = new Map()\n  const silenceLogger = false\n  function onHTMLRenderRSCError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components')\n    )\n  }\n  const serverComponentsErrorHandler = createHTMLReactServerErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    silenceLogger,\n    onHTMLRenderRSCError\n  )\n\n  function onHTMLRenderSSRError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'server-rendering')\n    )\n  }\n\n  const allCapturedErrors: Array<unknown> = []\n  const htmlRendererErrorHandler = createHTMLErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    allCapturedErrors,\n    silenceLogger,\n    onHTMLRenderSSRError\n  )\n\n  let reactServerResult: null | ReactServerResult = null\n\n  const setHeader = res.setHeader.bind(res)\n\n  try {\n    // This is a dynamic render. We don't do dynamic tracking because we're not prerendering\n    const RSCPayload = await getRSCPayload(tree, ctx, res.statusCode === 404)\n    reactServerResult = new ReactServerResult(\n      ComponentMod.renderToReadableStream(\n        RSCPayload,\n        clientReferenceManifest.clientModules,\n        {\n          onError: serverComponentsErrorHandler,\n        }\n      )\n    )\n\n    // React doesn't start rendering synchronously but we want the RSC render to have a chance to start\n    // before we begin SSR rendering because we want to capture any available preload headers so we tick\n    // one task before continuing\n    await waitAtLeastOneReactRenderTask()\n\n    // If provided, the postpone state should be parsed as JSON so it can be\n    // provided to React.\n    if (typeof renderOpts.postponed === 'string') {\n      if (postponedState?.type === DynamicState.DATA) {\n        // We have a complete HTML Document in the prerender but we need to\n        // still include the new server component render because it was not included\n        // in the static prelude.\n        const inlinedReactServerDataStream = createInlinedDataReadableStream(\n          reactServerResult.tee(),\n          ctx.nonce,\n          formState\n        )\n\n        return chainStreams(\n          inlinedReactServerDataStream,\n          createDocumentClosingStream()\n        )\n      } else if (postponedState) {\n        // We assume we have dynamic HTML requiring a resume render to complete\n        const postponed = getPostponedFromState(postponedState)\n\n        const resume = require('react-dom/server.edge')\n          .resume as (typeof import('react-dom/server.edge'))['resume']\n\n        const htmlStream = await resume(\n          <App\n            reactServerStream={reactServerResult.tee()}\n            preinitScripts={preinitScripts}\n            clientReferenceManifest={clientReferenceManifest}\n            ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n            nonce={ctx.nonce}\n          />,\n          postponed,\n          {\n            onError: htmlRendererErrorHandler,\n            nonce: ctx.nonce,\n          }\n        )\n\n        const getServerInsertedHTML = makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: allCapturedErrors,\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        })\n        return await continueDynamicHTMLResume(htmlStream, {\n          inlinedDataStream: createInlinedDataReadableStream(\n            reactServerResult.consume(),\n            ctx.nonce,\n            formState\n          ),\n          getServerInsertedHTML,\n        })\n      }\n    }\n\n    // This is a regular dynamic render\n    const renderToReadableStream = require('react-dom/server.edge')\n      .renderToReadableStream as (typeof import('react-dom/server.edge'))['renderToReadableStream']\n\n    const htmlStream = await renderToReadableStream(\n      <App\n        reactServerStream={reactServerResult.tee()}\n        preinitScripts={preinitScripts}\n        clientReferenceManifest={clientReferenceManifest}\n        ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n        nonce={ctx.nonce}\n      />,\n      {\n        onError: htmlRendererErrorHandler,\n        nonce: ctx.nonce,\n        onHeaders: (headers: Headers) => {\n          headers.forEach((value, key) => {\n            setHeader(key, value)\n          })\n        },\n        maxHeadersLength: renderOpts.reactMaxHeadersLength,\n        // When debugging the static shell, client-side rendering should be\n        // disabled to prevent blanking out the page.\n        bootstrapScripts: renderOpts.isDebugStaticShell\n          ? []\n          : [bootstrapScript],\n        formState,\n      }\n    )\n\n    const getServerInsertedHTML = makeGetServerInsertedHTML({\n      polyfills,\n      renderServerInsertedHTML,\n      serverCapturedErrors: allCapturedErrors,\n      basePath: renderOpts.basePath,\n      tracingMetadata: tracingMetadata,\n    })\n    /**\n     * Rules of Static & Dynamic HTML:\n     *\n     *    1.) We must generate static HTML unless the caller explicitly opts\n     *        in to dynamic HTML support.\n     *\n     *    2.) If dynamic HTML support is requested, we must honor that request\n     *        or throw an error. It is the sole responsibility of the caller to\n     *        ensure they aren't e.g. requesting dynamic HTML for an AMP page.\n     *\n     * These rules help ensure that other existing features like request caching,\n     * coalescing, and ISR continue working as intended.\n     */\n    const generateStaticHTML = renderOpts.supportsDynamicResponse !== true\n    const validateRootLayout = renderOpts.dev\n    return await continueFizzStream(htmlStream, {\n      inlinedDataStream: createInlinedDataReadableStream(\n        reactServerResult.consume(),\n        ctx.nonce,\n        formState\n      ),\n      isStaticGeneration: generateStaticHTML,\n      getServerInsertedHTML,\n      serverInsertedHTMLToHead: true,\n      validateRootLayout,\n    })\n  } catch (err) {\n    if (\n      isStaticGenBailoutError(err) ||\n      (typeof err === 'object' &&\n        err !== null &&\n        'message' in err &&\n        typeof err.message === 'string' &&\n        err.message.includes(\n          'https://nextjs.org/docs/advanced-features/static-html-export'\n        ))\n    ) {\n      // Ensure that \"next dev\" prints the red error overlay\n      throw err\n    }\n\n    // If a bailout made it to this point, it means it wasn't wrapped inside\n    // a suspense boundary.\n    const shouldBailoutToCSR = isBailoutToCSRError(err)\n    if (shouldBailoutToCSR) {\n      const stack = getStackWithoutErrorMessage(err)\n      error(\n        `${err.reason} should be wrapped in a suspense boundary at page \"${ctx.pagePath}\". Read more: https://nextjs.org/docs/messages/missing-suspense-with-csr-bailout\\n${stack}`\n      )\n\n      throw err\n    }\n\n    let errorType: 'not-found' | 'redirect' | undefined\n\n    if (isNotFoundError(err)) {\n      errorType = 'not-found'\n      res.statusCode = 404\n    } else if (isRedirectError(err)) {\n      errorType = 'redirect'\n      res.statusCode = getRedirectStatusCodeFromError(err)\n\n      const redirectUrl = addPathPrefix(\n        getURLFromRedirectError(err),\n        renderOpts.basePath\n      )\n\n      // If there were mutable cookies set, we need to set them on the\n      // response.\n      const headers = new Headers()\n      if (appendMutableCookies(headers, ctx.requestStore.mutableCookies)) {\n        setHeader('set-cookie', Array.from(headers.values()))\n      }\n\n      setHeader('location', redirectUrl)\n    } else if (!shouldBailoutToCSR) {\n      res.statusCode = 500\n    }\n\n    const [errorPreinitScripts, errorBootstrapScript] = getRequiredScripts(\n      renderOpts.buildManifest,\n      ctx.assetPrefix,\n      renderOpts.crossOrigin,\n      renderOpts.subresourceIntegrityManifest,\n      getAssetQueryString(ctx, false),\n      ctx.nonce,\n      '/_not-found/page'\n    )\n\n    const errorRSCPayload = await getErrorRSCPayload(tree, ctx, errorType)\n\n    const errorServerStream = ComponentMod.renderToReadableStream(\n      errorRSCPayload,\n      clientReferenceManifest.clientModules,\n      {\n        onError: serverComponentsErrorHandler,\n      }\n    )\n\n    if (reactServerResult === null) {\n      // We errored when we did not have an RSC stream to read from. This is not just a render\n      // error, we need to throw early\n      throw err\n    }\n\n    try {\n      const fizzStream = await renderToInitialFizzStream({\n        ReactDOMServer: require('react-dom/server.edge'),\n        element: (\n          <AppWithoutContext\n            reactServerStream={errorServerStream}\n            preinitScripts={errorPreinitScripts}\n            clientReferenceManifest={clientReferenceManifest}\n            nonce={ctx.nonce}\n          />\n        ),\n        streamOptions: {\n          nonce: ctx.nonce,\n          // Include hydration scripts in the HTML\n          bootstrapScripts: [errorBootstrapScript],\n          formState,\n        },\n      })\n\n      /**\n       * Rules of Static & Dynamic HTML:\n       *\n       *    1.) We must generate static HTML unless the caller explicitly opts\n       *        in to dynamic HTML support.\n       *\n       *    2.) If dynamic HTML support is requested, we must honor that request\n       *        or throw an error. It is the sole responsibility of the caller to\n       *        ensure they aren't e.g. requesting dynamic HTML for an AMP page.\n       *\n       * These rules help ensure that other existing features like request caching,\n       * coalescing, and ISR continue working as intended.\n       */\n      const generateStaticHTML = renderOpts.supportsDynamicResponse !== true\n      const validateRootLayout = renderOpts.dev\n      return await continueFizzStream(fizzStream, {\n        inlinedDataStream: createInlinedDataReadableStream(\n          // This is intentionally using the readable datastream from the\n          // main render rather than the flight data from the error page\n          // render\n          reactServerResult.consume(),\n          ctx.nonce,\n          formState\n        ),\n        isStaticGeneration: generateStaticHTML,\n        getServerInsertedHTML: makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: [],\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        }),\n        serverInsertedHTMLToHead: true,\n        validateRootLayout,\n      })\n    } catch (finalErr: any) {\n      if (process.env.NODE_ENV === 'development' && isNotFoundError(finalErr)) {\n        const bailOnNotFound: typeof import('../../client/components/dev-root-not-found-boundary').bailOnNotFound =\n          require('../../client/components/dev-root-not-found-boundary').bailOnNotFound\n        bailOnNotFound()\n      }\n      throw finalErr\n    }\n  }\n}\n\ntype PrerenderToStreamResult = {\n  stream: ReadableStream<Uint8Array>\n  digestErrorsMap: Map<string, DigestedError>\n  ssrErrors: Array<unknown>\n  dynamicTracking?: null | DynamicTrackingState\n  collectedRevalidate: number\n  collectedTags: null | string[]\n}\n\n/**\n * Determines whether we should generate static flight data.\n */\nfunction shouldGenerateStaticFlightData(workStore: WorkStore): boolean {\n  const { fallbackRouteParams, isStaticGeneration } = workStore\n  if (!isStaticGeneration) return false\n\n  if (fallbackRouteParams && fallbackRouteParams.size > 0) {\n    return false\n  }\n\n  return true\n}\n\nasync function prerenderToStream(\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  ctx: AppRenderContext,\n  metadata: AppPageRenderResultMetadata,\n  workStore: WorkStore,\n  tree: LoaderTree\n): Promise<PrerenderToStreamResult> {\n  ctx.requestStore.phase = 'render'\n\n  // When prerendering formState is always null. We still include it\n  // because some shared APIs expect a formState value and this is slightly\n  // more explicit than making it an optional function argument\n  const formState = null\n\n  const renderOpts = ctx.renderOpts\n  const ComponentMod = renderOpts.ComponentMod\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n  const fallbackRouteParams = workStore.fallbackRouteParams\n\n  const { ServerInsertedHTMLProvider, renderServerInsertedHTML } =\n    createServerInsertedHTML()\n\n  const tracingMetadata = getTracedMetadata(\n    getTracer().getTracePropagationData(),\n    renderOpts.experimental.clientTraceMetadata\n  )\n\n  const polyfills: JSX.IntrinsicElements['script'][] =\n    renderOpts.buildManifest.polyfillFiles\n      .filter(\n        (polyfill) =>\n          polyfill.endsWith('.js') && !polyfill.endsWith('.module.js')\n      )\n      .map((polyfill) => ({\n        src: `${ctx.assetPrefix}/_next/${polyfill}${getAssetQueryString(\n          ctx,\n          false\n        )}`,\n        integrity: renderOpts.subresourceIntegrityManifest?.[polyfill],\n        crossOrigin: renderOpts.crossOrigin,\n        noModule: true,\n        nonce: ctx.nonce,\n      }))\n\n  const [preinitScripts, bootstrapScript] = getRequiredScripts(\n    renderOpts.buildManifest,\n    // Why is assetPrefix optional on renderOpts?\n    // @TODO make it default empty string on renderOpts and get rid of it from ctx\n    ctx.assetPrefix,\n    renderOpts.crossOrigin,\n    renderOpts.subresourceIntegrityManifest,\n    getAssetQueryString(ctx, true),\n    ctx.nonce,\n    renderOpts.page\n  )\n\n  const reactServerErrorsByDigest: Map<string, DigestedError> = new Map()\n  // We don't report errors during prerendering through our instrumentation hooks\n  const silenceLogger = !!renderOpts.experimental.isRoutePPREnabled\n  function onHTMLRenderRSCError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components')\n    )\n  }\n  const serverComponentsErrorHandler = createHTMLReactServerErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    silenceLogger,\n    onHTMLRenderRSCError\n  )\n\n  function onHTMLRenderSSRError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'server-rendering')\n    )\n  }\n  const allCapturedErrors: Array<unknown> = []\n  const htmlRendererErrorHandler = createHTMLErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    allCapturedErrors,\n    silenceLogger,\n    onHTMLRenderSSRError\n  )\n\n  let reactServerPrerenderResult: null | ReactServerPrerenderResult = null\n  const setHeader = (name: string, value: string | string[]) => {\n    res.setHeader(name, value)\n\n    metadata.headers ??= {}\n    metadata.headers[name] = res.getHeader(name)\n\n    return res\n  }\n\n  let prerenderStore: PrerenderStore | null = null\n\n  try {\n    if (renderOpts.experimental.dynamicIO) {\n      if (renderOpts.experimental.isRoutePPREnabled) {\n        /**\n         * dynamicIO with PPR\n         *\n         * The general approach is to render the RSC stream first allowing any cache reads to resolve.\n         * Once we have settled all cache reads we restart the render and abort after a single Task.\n         *\n         * Unlike with the non PPR case we can't synchronously abort the render when a dynamic API is used\n         * during the initial render because we need to ensure all caches can be filled as part of the initial Task\n         * and a synchronous abort might prevent us from filling all caches.\n         *\n         * Once the render is complete we allow the SSR render to finish and use a combination of the postponed state\n         * and the reactServerIsDynamic value to determine how to treat the resulting render\n         */\n\n        const PRERENDER_COMPLETE = 'NEXT_PRERENDER_COMPLETE'\n        const abortReason = new Error(PRERENDER_COMPLETE)\n\n        let flightController = new AbortController()\n        const cacheSignal = new CacheSignal()\n\n        const prospectiveRenderPrerenderStore: PrerenderStore =\n          (prerenderStore = {\n            type: 'prerender',\n            phase: 'render',\n            implicitTags: ctx.requestStore.implicitTags,\n            renderSignal: flightController.signal,\n            cacheSignal,\n            // During the prospective render we don't want to synchronously abort on dynamic access\n            // because it could prevent us from discovering all caches in siblings. So we omit the controller\n            // from the prerender store this time.\n            controller: null,\n            // With PPR during Prerender we don't need to track individual dynamic reasons\n            // because we will always do a final render after caches have filled and we\n            // will track it again there\n            dynamicTracking: null,\n            revalidate: INFINITE_CACHE,\n            tags: [...ctx.requestStore.implicitTags],\n          })\n\n        let reactServerIsDynamic = false\n        function onError(err: unknown) {\n          if (err === abortReason) {\n            reactServerIsDynamic = true\n            return PRERENDER_COMPLETE\n          } else if (isPrerenderInterruptedError(err)) {\n            reactServerIsDynamic = true\n            return err.digest\n          }\n\n          return serverComponentsErrorHandler(err)\n        }\n\n        // We're not going to use the result of this render because the only time it could be used\n        // is if it completes in a microtask and that's likely very rare for any non-trivial app\n        const firstAttemptRSCPayload = await workUnitAsyncStorage.run(\n          prospectiveRenderPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n\n        let didError = false\n        let prospectiveRenderError: unknown = null\n        ;(\n          workUnitAsyncStorage.run(\n            // The store to scope\n            prospectiveRenderPrerenderStore,\n            // The function to run\n            ComponentMod.prerender,\n            // ... the arguments for the function to run\n            firstAttemptRSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              // This render will be thrown away so we don't need to track errors or postpones\n              onError,\n              onPostpone: undefined,\n              // we don't care to track postpones during the prospective render because we need\n              // to always do a final render anyway\n              signal: flightController.signal,\n            }\n          ) as Promise<ReactServerPrerenderResolveToType>\n        ).catch((err) => {\n          if (\n            err !== abortReason &&\n            !isPrerenderInterruptedError(err) &&\n            !isDynamicServerError(err)\n          ) {\n            didError = true\n            prospectiveRenderError = err\n          }\n        })\n\n        // When this resolves the cache has no inflight reads and we can ascertain the dynamic outcome\n        await cacheSignal.cacheReady()\n        flightController.abort(abortReason)\n        // We wait a microtask to to ensure the catch handler has a chance to run if the root errors when we abort.\n        await 1\n        if (didError) {\n          // We errored with something other than prerender errors during the warmup. We throw here\n          // to allow the user error to be handled\n          throw prospectiveRenderError\n        }\n\n        // When PPR is enabled we don't synchronously abort the render when performing a prospective render\n        // because it might prevent us from discovering all caches during the render which is essential\n        // when we perform the second single-task render.\n\n        // Reset the dynamic IO state for the final render\n        reactServerIsDynamic = false\n        flightController = new AbortController()\n        let dynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n\n        const finalRenderPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: ctx.requestStore.implicitTags,\n          renderSignal: flightController.signal,\n          // During the final prerender we don't need to track cache access so we omit the signal\n          cacheSignal: null,\n          // During the final render we do want to abort synchronously on dynamic access so we\n          // include the flight controller in the store.\n          controller: flightController,\n          dynamicTracking,\n          revalidate: INFINITE_CACHE,\n          tags: [...ctx.requestStore.implicitTags],\n        })\n\n        function onPostpone(reason: string) {\n          if (\n            reason === PRERENDER_COMPLETE ||\n            isRenderInterruptedReason(reason)\n          ) {\n            reactServerIsDynamic = true\n          }\n        }\n        const finalAttemptRSCPayload = await workUnitAsyncStorage.run(\n          finalRenderPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n        const reactServerResult = (reactServerPrerenderResult =\n          await createReactServerPrerenderResult(\n            prerenderAndAbortInSequentialTasks(\n              () =>\n                workUnitAsyncStorage.run(\n                  // The store to scope\n                  finalRenderPrerenderStore,\n                  // The function to run\n                  ComponentMod.prerender,\n                  // ... the arguments for the function to run\n                  finalAttemptRSCPayload,\n                  clientReferenceManifest.clientModules,\n                  {\n                    onError,\n                    onPostpone,\n                    signal: flightController.signal,\n                  }\n                ),\n              () => {\n                flightController.abort(abortReason)\n              }\n            )\n          ))\n\n        await warmFlightResponse(\n          reactServerResult.asStream(),\n          clientReferenceManifest\n        )\n\n        const SSRController = new AbortController()\n        const ssrPrerenderStore: PrerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: ctx.requestStore.implicitTags,\n          renderSignal: SSRController.signal,\n          // For HTML Generation we don't need to track cache reads (RSC only)\n          cacheSignal: null,\n          // We expect the SSR render to complete in a single Task and need to be able to synchronously abort\n          // When you use APIs that are considered dynamic or synchronous IO.\n          controller: SSRController,\n          // We do track dynamic access because searchParams and certain hooks can still be\n          // dynamic during SSR\n          dynamicTracking,\n          revalidate: INFINITE_CACHE,\n          tags: [...ctx.requestStore.implicitTags],\n        }\n        let SSRIsDynamic = false\n        function SSROnError(err: unknown, errorInfo: ErrorInfo) {\n          if (\n            isAbortReason(err, abortReason) ||\n            isPrerenderInterruptedError(err)\n          ) {\n            SSRIsDynamic = true\n\n            const componentStack: string | undefined = (errorInfo as any)\n              .componentStack\n            if (typeof componentStack === 'string') {\n              trackAllowedDynamicAccess(\n                workStore.route,\n                err,\n                componentStack,\n                dynamicTracking\n              )\n            }\n            return\n          }\n\n          return htmlRendererErrorHandler(err, errorInfo)\n        }\n\n        function SSROnPostpone(reason: string) {\n          if (\n            reason === PRERENDER_COMPLETE ||\n            isRenderInterruptedReason(reason)\n          ) {\n            SSRIsDynamic = true\n          }\n        }\n\n        const prerender = require('react-dom/static.edge')\n          .prerender as (typeof import('react-dom/static.edge'))['prerender']\n        const { prelude, postponed } = await prerenderAndAbortInSequentialTasks(\n          () =>\n            workUnitAsyncStorage.run(\n              ssrPrerenderStore,\n              prerender,\n              <App\n                reactServerStream={reactServerResult.asUnclosingStream()}\n                preinitScripts={preinitScripts}\n                clientReferenceManifest={clientReferenceManifest}\n                ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                nonce={ctx.nonce}\n              />,\n              {\n                signal: SSRController.signal,\n                onError: SSROnError,\n                onPostpone: SSROnPostpone,\n                onHeaders: (headers: Headers) => {\n                  headers.forEach((value, key) => {\n                    setHeader(key, value)\n                  })\n                },\n                maxHeadersLength: renderOpts.reactMaxHeadersLength,\n                // When debugging the static shell, client-side rendering should be\n                // disabled to prevent blanking out the page.\n                bootstrapScripts: renderOpts.isDebugStaticShell\n                  ? []\n                  : [bootstrapScript],\n              }\n            ),\n          () => {\n            SSRController.abort(abortReason)\n          }\n        )\n\n        throwIfDisallowedDynamic(workStore, dynamicTracking)\n\n        const getServerInsertedHTML = makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: allCapturedErrors,\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        })\n\n        metadata.flightData = await streamToBuffer(reactServerResult.asStream())\n\n        if (SSRIsDynamic || reactServerIsDynamic) {\n          if (postponed != null) {\n            // Dynamic HTML case\n            metadata.postponed = getDynamicHTMLPostponedState(\n              postponed,\n              fallbackRouteParams\n            )\n          } else {\n            // Dynamic Data case\n            metadata.postponed = getDynamicDataPostponedState()\n          }\n          reactServerResult.consume()\n          return {\n            digestErrorsMap: reactServerErrorsByDigest,\n            ssrErrors: allCapturedErrors,\n            stream: await continueDynamicPrerender(prelude, {\n              getServerInsertedHTML,\n            }),\n            dynamicTracking,\n            // TODO: Should this include the SSR pass?\n            collectedRevalidate: finalRenderPrerenderStore.revalidate,\n            collectedTags: finalRenderPrerenderStore.tags,\n          }\n        } else {\n          // Static case\n          if (workStore.forceDynamic) {\n            throw new StaticGenBailoutError(\n              'Invariant: a Page with `dynamic = \"force-dynamic\"` did not trigger the dynamic pathway. This is a bug in Next.js'\n            )\n          }\n\n          let htmlStream = prelude\n          if (postponed != null) {\n            // We postponed but nothing dynamic was used. We resume the render now and immediately abort it\n            // so we can set all the postponed boundaries to client render mode before we store the HTML response\n            const resume = require('react-dom/server.edge')\n              .resume as (typeof import('react-dom/server.edge'))['resume']\n\n            // We don't actually want to render anything so we just pass a stream\n            // that never resolves. The resume call is going to abort immediately anyway\n            const foreverStream = new ReadableStream<Uint8Array>()\n\n            const resumeStream = await resume(\n              <App\n                reactServerStream={foreverStream}\n                preinitScripts={() => {}}\n                clientReferenceManifest={clientReferenceManifest}\n                ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                nonce={ctx.nonce}\n              />,\n              JSON.parse(JSON.stringify(postponed)),\n              {\n                signal: createPostponedAbortSignal('static prerender resume'),\n                onError: htmlRendererErrorHandler,\n                nonce: ctx.nonce,\n              }\n            )\n\n            // First we write everything from the prerender, then we write everything from the aborted resume render\n            htmlStream = chainStreams(prelude, resumeStream)\n          }\n\n          return {\n            digestErrorsMap: reactServerErrorsByDigest,\n            ssrErrors: allCapturedErrors,\n            stream: await continueStaticPrerender(htmlStream, {\n              inlinedDataStream: createInlinedDataReadableStream(\n                reactServerResult.consumeAsStream(),\n                ctx.nonce,\n                formState\n              ),\n              getServerInsertedHTML,\n            }),\n            dynamicTracking,\n            // TODO: Should this include the SSR pass?\n            collectedRevalidate: finalRenderPrerenderStore.revalidate,\n            collectedTags: finalRenderPrerenderStore.tags,\n          }\n        }\n      } else {\n        /**\n         * dynamicIO without PPR\n         *\n         * The general approach is to render the RSC tree first allowing for any inflight\n         * caches to resolve. Once we have settled inflight caches we can check and see if any\n         * synchronous dynamic APIs were used. If so we don't need to bother doing anything more\n         * because the page will be dynamic on re-render anyway\n         *\n         * If no sync dynamic APIs were used we then re-render and abort after a single Task.\n         * If the render errors we know that the page has some dynamic IO. This assumes and relies\n         * upon caches reading from a in process memory cache and resolving in a microtask. While this\n         * is true from our own default cache implementation and if you don't exceed our LRU size it\n         * might not be true for custom cache implementations.\n         *\n         * Future implementations can do some different strategies during build like using IPC to\n         * synchronously fill caches during this special rendering mode. For now this heuristic should work\n         */\n\n        const cache = workStore.incrementalCache\n        if (!cache) {\n          throw new Error(\n            'Expected incremental cache to exist. This is a bug in Next.js'\n          )\n        }\n\n        const PRERENDER_COMPLETE = 'NEXT_PRERENDER_COMPLETE'\n        const abortReason = new Error(PRERENDER_COMPLETE)\n        ;(abortReason as any).digest = PRERENDER_COMPLETE\n\n        // We need to scope the dynamic IO state per render because we don't want to leak\n        // details between the prospective render and the final render\n        let flightController = new AbortController()\n\n        let dynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n\n        const cacheSignal = new CacheSignal()\n        const prospectiveRenderPrerenderStore: PrerenderStore =\n          (prerenderStore = {\n            type: 'prerender',\n            phase: 'render',\n            implicitTags: ctx.requestStore.implicitTags,\n            renderSignal: flightController.signal,\n            cacheSignal,\n            // When PPR is off we can synchronously abort the prospective render because we will\n            // always hit this path on the final render and thus we can skip the final render and just\n            // consider the route dynamic.\n            controller: flightController,\n            dynamicTracking,\n            revalidate: INFINITE_CACHE,\n            tags: [...ctx.requestStore.implicitTags],\n          })\n\n        const firstAttemptRSCPayload = await workUnitAsyncStorage.run(\n          prospectiveRenderPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n\n        let reactServerIsDynamic = false\n        let reactServerIsSynchronouslyDynamic = false\n\n        function onError(err: unknown) {\n          if (err === abortReason) {\n            reactServerIsDynamic = true\n            return PRERENDER_COMPLETE\n          } else if (isPrerenderInterruptedError(err)) {\n            reactServerIsSynchronouslyDynamic = true\n            return err.digest\n          }\n\n          return serverComponentsErrorHandler(err)\n        }\n\n        try {\n          const prospectiveStream = workUnitAsyncStorage.run(\n            // The store to scope\n            prospectiveRenderPrerenderStore,\n            // The function to run\n            ComponentMod.renderToReadableStream,\n            // ... the arguments for the function to run\n            firstAttemptRSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError,\n              signal: flightController.signal,\n            }\n          ) as ReadableStream<Uint8Array>\n\n          // When this resolves the cache has no inflight reads and we can ascertain the dynamic outcome\n          await cacheSignal.cacheReady()\n          // Even though we could detect whether a sync dynamic API was used we still need to render SSR to\n          // do error validation so we just abort and re-render.\n          flightController.abort(abortReason)\n\n          await warmFlightResponse(prospectiveStream, clientReferenceManifest)\n        } catch (err) {\n          if (\n            err === abortReason ||\n            isPrerenderInterruptedError(err) ||\n            isDynamicServerError(err)\n          ) {\n            // We aborted with an incomplete shell. We'll handle this below with the handling\n            // for dynamic.\n          } else {\n            // We have some other kind of shell error, we want to bubble this up to be handled\n            throw err\n          }\n        }\n\n        // Reset the prerenderState because we are going to retry the render\n        flightController = new AbortController()\n        dynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n        reactServerIsDynamic = false\n        reactServerIsSynchronouslyDynamic = false\n        let SSRIsDynamic = false\n\n        const finalRenderPrerenderStore: PrerenderStore = (prerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: ctx.requestStore.implicitTags,\n          renderSignal: flightController.signal,\n          // During the final prerender we don't need to track cache access so we omit the signal\n          cacheSignal: null,\n          controller: flightController,\n          dynamicTracking,\n          revalidate: INFINITE_CACHE,\n          tags: [...ctx.requestStore.implicitTags],\n        })\n\n        const SSRController = new AbortController()\n        const ssrPrerenderStore: PrerenderStore = {\n          type: 'prerender',\n          phase: 'render',\n          implicitTags: ctx.requestStore.implicitTags,\n          renderSignal: SSRController.signal,\n          // For HTML Generation we don't need to track cache reads (RSC only)\n          cacheSignal: null,\n          // We expect the SSR render to complete in a single Task and need to be able to synchronously abort\n          // When you use APIs that are considered dynamic or synchronous IO.\n          controller: SSRController,\n          // We do track dynamic access because searchParams and certain hooks can still be\n          // dynamic during SSR\n          dynamicTracking,\n          revalidate: INFINITE_CACHE,\n          tags: [...ctx.requestStore.implicitTags],\n        }\n\n        const finalAttemptRSCPayload = await workUnitAsyncStorage.run(\n          finalRenderPrerenderStore,\n          getRSCPayload,\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n\n        function SSROnError(err: unknown, errorInfo?: ErrorInfo) {\n          if (\n            isAbortReason(err, abortReason) ||\n            isPrerenderInterruptedError(err)\n          ) {\n            SSRIsDynamic = true\n            const componentStack: string | undefined = (errorInfo as any)\n              .componentStack\n            if (typeof componentStack === 'string') {\n              trackAllowedDynamicAccess(\n                workStore.route,\n                err,\n                componentStack,\n                dynamicTracking\n              )\n            }\n            return\n          }\n\n          return htmlRendererErrorHandler(err, errorInfo)\n        }\n\n        let reactServerStream: ReadableStream<Uint8Array>\n        let htmlStream\n        try {\n          htmlStream = await prerenderAndAbortInSequentialTasks(\n            () => {\n              const teedStream = (\n                workUnitAsyncStorage.run(\n                  // The store to scope\n                  finalRenderPrerenderStore,\n                  // The function to run\n                  ComponentMod.renderToReadableStream,\n                  // ... the arguments for the function to run\n                  finalAttemptRSCPayload,\n                  clientReferenceManifest.clientModules,\n                  {\n                    onError,\n                    signal: flightController.signal,\n                  }\n                ) as ReadableStream<Uint8Array>\n              ).tee()\n\n              reactServerStream = teedStream[0]\n              const rscForSSRStream = teedStream[1]\n\n              const renderToReadableStream = require('react-dom/server.edge')\n                .renderToReadableStream as (typeof import('react-dom/server.edge'))['renderToReadableStream']\n              const pendingHTMLStream = workUnitAsyncStorage.run(\n                ssrPrerenderStore,\n                renderToReadableStream,\n                <App\n                  reactServerStream={rscForSSRStream}\n                  preinitScripts={preinitScripts}\n                  clientReferenceManifest={clientReferenceManifest}\n                  ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                  nonce={ctx.nonce}\n                />,\n                {\n                  signal: SSRController.signal,\n                  onError: SSROnError,\n                  // When debugging the static shell, client-side rendering should be\n                  // disabled to prevent blanking out the page.\n                  bootstrapScripts: renderOpts.isDebugStaticShell\n                    ? []\n                    : [bootstrapScript],\n                }\n              )\n              pendingHTMLStream.catch(() => {})\n              return pendingHTMLStream\n            },\n            () => {\n              SSRController.abort(abortReason)\n              flightController.abort(abortReason)\n            }\n          )\n        } catch (err) {\n          if (err === abortReason || isPrerenderInterruptedError(err)) {\n            // We aborted with an incomplete shell. We'll handle this below with the handling\n            // for dynamic.\n          } else {\n            // We have some other kind of shell error, we want to bubble this up to be handled\n            throw err\n          }\n        }\n\n        throwIfDisallowedDynamic(workStore, dynamicTracking)\n\n        if (SSRIsDynamic) {\n          // Something dynamic happened in the SSR phase of the render. This could be IO or it could be\n          // a dynamic API like accessing searchParams in a client Page\n          const dynamicReason = getFirstDynamicReason(dynamicTracking)\n          if (dynamicReason) {\n            throw new DynamicServerError(\n              `Route ${workStore.route} couldn't be rendered statically because it used \\`${dynamicReason}\\`. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n            )\n          } else {\n            throw new DynamicServerError(\n              `Route ${workStore.route} couldn't be rendered statically because it used IO that was not cached in a Client Component. See more info here: https://nextjs.org/docs/messages/dynamic-io`\n            )\n          }\n        } else if (reactServerIsSynchronouslyDynamic) {\n          const dynamicReason = getFirstDynamicReason(dynamicTracking)\n          if (dynamicReason) {\n            throw new DynamicServerError(\n              `Route ${workStore.route} couldn't be rendered statically because it used \\`${dynamicReason}\\`. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n            )\n          } else {\n            console.error(\n              'Expected Next.js to keep track of reason for opting out of static rendering but one was not found. This is a bug in Next.js'\n            )\n            throw new DynamicServerError(\n              `Route ${workStore.route} couldn't be rendered statically because it used a dynamic API. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n            )\n          }\n        } else if (reactServerIsDynamic) {\n          // There was unfinished work after we aborted after the first render Task. This means there is some IO\n          // that is not covered by a cache and we need to bail out of static generation.\n          const err = new DynamicServerError(\n            `Route ${workStore.route} couldn't be rendered statically because it used IO that was not cached in a Server Component. See more info here: https://nextjs.org/docs/messages/dynamic-io`\n          )\n          serverComponentsErrorHandler(err)\n          throw err\n        }\n\n        const reactServerResult =\n          await createReactServerPrerenderResultFromRender(reactServerStream!)\n\n        metadata.flightData = await streamToBuffer(reactServerResult.asStream())\n\n        const getServerInsertedHTML = makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: allCapturedErrors,\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        })\n        const validateRootLayout = renderOpts.dev\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueFizzStream(htmlStream!, {\n            inlinedDataStream: createInlinedDataReadableStream(\n              reactServerResult.consumeAsStream(),\n              ctx.nonce,\n              formState\n            ),\n            isStaticGeneration: true,\n            getServerInsertedHTML,\n            serverInsertedHTMLToHead: true,\n            validateRootLayout,\n          }),\n          dynamicTracking,\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: finalRenderPrerenderStore.revalidate,\n          collectedTags: finalRenderPrerenderStore.tags,\n        }\n      }\n    } else if (renderOpts.experimental.isRoutePPREnabled) {\n      // We're statically generating with PPR and need to do dynamic tracking\n      let dynamicTracking = createDynamicTrackingState(\n        renderOpts.isDebugDynamicAccesses\n      )\n      const reactServerPrerenderStore: PrerenderStore = (prerenderStore = {\n        type: 'prerender-ppr',\n        phase: 'render',\n        implicitTags: ctx.requestStore.implicitTags,\n        dynamicTracking,\n        revalidate: INFINITE_CACHE,\n        tags: [...ctx.requestStore.implicitTags],\n      })\n      const RSCPayload = await workUnitAsyncStorage.run(\n        reactServerPrerenderStore,\n        getRSCPayload,\n        tree,\n        ctx,\n        res.statusCode === 404\n      )\n      const reactServerResult = (reactServerPrerenderResult =\n        await createReactServerPrerenderResultFromRender(\n          workUnitAsyncStorage.run(\n            reactServerPrerenderStore,\n            ComponentMod.renderToReadableStream,\n            // ... the arguments for the function to run\n            RSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: serverComponentsErrorHandler,\n            }\n          )\n        ))\n\n      const ssrPrerenderStore: PrerenderStore = {\n        type: 'prerender-ppr',\n        phase: 'render',\n        implicitTags: ctx.requestStore.implicitTags,\n        dynamicTracking,\n        revalidate: INFINITE_CACHE,\n        tags: [...ctx.requestStore.implicitTags],\n      }\n      const prerender = require('react-dom/static.edge')\n        .prerender as (typeof import('react-dom/static.edge'))['prerender']\n      const { prelude, postponed } = await workUnitAsyncStorage.run(\n        ssrPrerenderStore,\n        prerender,\n        <App\n          reactServerStream={reactServerResult.asUnclosingStream()}\n          preinitScripts={preinitScripts}\n          clientReferenceManifest={clientReferenceManifest}\n          ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n          nonce={ctx.nonce}\n        />,\n        {\n          onError: htmlRendererErrorHandler,\n          onHeaders: (headers: Headers) => {\n            headers.forEach((value, key) => {\n              setHeader(key, value)\n            })\n          },\n          maxHeadersLength: renderOpts.reactMaxHeadersLength,\n          // When debugging the static shell, client-side rendering should be\n          // disabled to prevent blanking out the page.\n          bootstrapScripts: renderOpts.isDebugStaticShell\n            ? []\n            : [bootstrapScript],\n        }\n      )\n      const getServerInsertedHTML = makeGetServerInsertedHTML({\n        polyfills,\n        renderServerInsertedHTML,\n        serverCapturedErrors: allCapturedErrors,\n        basePath: renderOpts.basePath,\n        tracingMetadata: tracingMetadata,\n      })\n\n      // After awaiting here we've waited for the entire RSC render to complete. Crucially this means\n      // that when we detect whether we've used dynamic APIs below we know we'll have picked up even\n      // parts of the React Server render that might not be used in the SSR render.\n      const flightData = await streamToBuffer(reactServerResult.asStream())\n\n      if (shouldGenerateStaticFlightData(workStore)) {\n        metadata.flightData = flightData\n      }\n\n      /**\n       * When prerendering there are three outcomes to consider\n       *\n       *   Dynamic HTML:      The prerender has dynamic holes (caused by using Next.js Dynamic Rendering APIs)\n       *                      We will need to resume this result when requests are handled and we don't include\n       *                      any server inserted HTML or inlined flight data in the static HTML\n       *\n       *   Dynamic Data:      The prerender has no dynamic holes but dynamic APIs were used. We will not\n       *                      resume this render when requests are handled but we will generate new inlined\n       *                      flight data since it is dynamic and differences may end up reconciling on the client\n       *\n       *   Static:            The prerender has no dynamic holes and no dynamic APIs were used. We statically encode\n       *                      all server inserted HTML and flight data\n       */\n      // First we check if we have any dynamic holes in our HTML prerender\n      if (accessedDynamicData(dynamicTracking)) {\n        if (postponed != null) {\n          // Dynamic HTML case.\n          metadata.postponed = getDynamicHTMLPostponedState(\n            postponed,\n            fallbackRouteParams\n          )\n        } else {\n          // Dynamic Data case.\n          metadata.postponed = getDynamicDataPostponedState()\n        }\n        // Regardless of whether this is the Dynamic HTML or Dynamic Data case we need to ensure we include\n        // server inserted html in the static response because the html that is part of the prerender may depend on it\n        // It is possible in the set of stream transforms for Dynamic HTML vs Dynamic Data may differ but currently both states\n        // require the same set so we unify the code path here\n        reactServerResult.consume()\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueDynamicPrerender(prelude, {\n            getServerInsertedHTML,\n          }),\n          dynamicTracking,\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: reactServerPrerenderStore.revalidate,\n          collectedTags: reactServerPrerenderStore.tags,\n        }\n      } else if (fallbackRouteParams && fallbackRouteParams.size > 0) {\n        // Rendering the fallback case.\n        metadata.postponed = getDynamicDataPostponedState()\n\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueDynamicPrerender(prelude, {\n            getServerInsertedHTML,\n          }),\n          dynamicTracking,\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: reactServerPrerenderStore.revalidate,\n          collectedTags: reactServerPrerenderStore.tags,\n        }\n      } else {\n        // Static case\n        // We still have not used any dynamic APIs. At this point we can produce an entirely static prerender response\n        if (workStore.forceDynamic) {\n          throw new StaticGenBailoutError(\n            'Invariant: a Page with `dynamic = \"force-dynamic\"` did not trigger the dynamic pathway. This is a bug in Next.js'\n          )\n        }\n\n        let htmlStream = prelude\n        if (postponed != null) {\n          // We postponed but nothing dynamic was used. We resume the render now and immediately abort it\n          // so we can set all the postponed boundaries to client render mode before we store the HTML response\n          const resume = require('react-dom/server.edge')\n            .resume as (typeof import('react-dom/server.edge'))['resume']\n\n          // We don't actually want to render anything so we just pass a stream\n          // that never resolves. The resume call is going to abort immediately anyway\n          const foreverStream = new ReadableStream<Uint8Array>()\n\n          const resumeStream = await resume(\n            <App\n              reactServerStream={foreverStream}\n              preinitScripts={() => {}}\n              clientReferenceManifest={clientReferenceManifest}\n              ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n              nonce={ctx.nonce}\n            />,\n            JSON.parse(JSON.stringify(postponed)),\n            {\n              signal: createPostponedAbortSignal('static prerender resume'),\n              onError: htmlRendererErrorHandler,\n              nonce: ctx.nonce,\n            }\n          )\n\n          // First we write everything from the prerender, then we write everything from the aborted resume render\n          htmlStream = chainStreams(prelude, resumeStream)\n        }\n\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueStaticPrerender(htmlStream, {\n            inlinedDataStream: createInlinedDataReadableStream(\n              reactServerResult.consumeAsStream(),\n              ctx.nonce,\n              formState\n            ),\n            getServerInsertedHTML,\n          }),\n          dynamicTracking,\n          // TODO: Should this include the SSR pass?\n          collectedRevalidate: reactServerPrerenderStore.revalidate,\n          collectedTags: reactServerPrerenderStore.tags,\n        }\n      }\n    } else {\n      const prerenderLegacyStore: PrerenderStore = (prerenderStore = {\n        type: 'prerender-legacy',\n        phase: 'render',\n        implicitTags: ctx.requestStore.implicitTags,\n        revalidate: INFINITE_CACHE,\n        tags: [...ctx.requestStore.implicitTags],\n      })\n      // This is a regular static generation. We don't do dynamic tracking because we rely on\n      // the old-school dynamic error handling to bail out of static generation\n      const RSCPayload = await workUnitAsyncStorage.run(\n        prerenderLegacyStore,\n        getRSCPayload,\n        tree,\n        ctx,\n        res.statusCode === 404\n      )\n      const reactServerResult = (reactServerPrerenderResult =\n        await createReactServerPrerenderResultFromRender(\n          workUnitAsyncStorage.run(\n            prerenderLegacyStore,\n            ComponentMod.renderToReadableStream,\n            RSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: serverComponentsErrorHandler,\n            }\n          )\n        ))\n\n      const renderToReadableStream = require('react-dom/server.edge')\n        .renderToReadableStream as (typeof import('react-dom/server.edge'))['renderToReadableStream']\n\n      const htmlStream = await workUnitAsyncStorage.run(\n        prerenderLegacyStore,\n        renderToReadableStream,\n        <App\n          reactServerStream={reactServerResult.asUnclosingStream()}\n          preinitScripts={preinitScripts}\n          clientReferenceManifest={clientReferenceManifest}\n          ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n          nonce={ctx.nonce}\n        />,\n        {\n          onError: htmlRendererErrorHandler,\n          nonce: ctx.nonce,\n          // When debugging the static shell, client-side rendering should be\n          // disabled to prevent blanking out the page.\n          bootstrapScripts: renderOpts.isDebugStaticShell\n            ? []\n            : [bootstrapScript],\n        }\n      )\n\n      if (shouldGenerateStaticFlightData(workStore)) {\n        metadata.flightData = await streamToBuffer(reactServerResult.asStream())\n      }\n\n      const getServerInsertedHTML = makeGetServerInsertedHTML({\n        polyfills,\n        renderServerInsertedHTML,\n        serverCapturedErrors: allCapturedErrors,\n        basePath: renderOpts.basePath,\n        tracingMetadata: tracingMetadata,\n      })\n      return {\n        digestErrorsMap: reactServerErrorsByDigest,\n        ssrErrors: allCapturedErrors,\n        stream: await continueFizzStream(htmlStream, {\n          inlinedDataStream: createInlinedDataReadableStream(\n            reactServerResult.consumeAsStream(),\n            ctx.nonce,\n            formState\n          ),\n          isStaticGeneration: true,\n          getServerInsertedHTML,\n          serverInsertedHTMLToHead: true,\n        }),\n        // TODO: Should this include the SSR pass?\n        collectedRevalidate: prerenderLegacyStore.revalidate,\n        collectedTags: prerenderLegacyStore.tags,\n      }\n    }\n  } catch (err) {\n    if (\n      isStaticGenBailoutError(err) ||\n      (typeof err === 'object' &&\n        err !== null &&\n        'message' in err &&\n        typeof err.message === 'string' &&\n        err.message.includes(\n          'https://nextjs.org/docs/advanced-features/static-html-export'\n        ))\n    ) {\n      // Ensure that \"next dev\" prints the red error overlay\n      throw err\n    }\n\n    // If this is a static generation error, we need to throw it so that it\n    // can be handled by the caller if we're in static generation mode.\n    if (isDynamicServerError(err)) {\n      throw err\n    }\n\n    // If a bailout made it to this point, it means it wasn't wrapped inside\n    // a suspense boundary.\n    const shouldBailoutToCSR = isBailoutToCSRError(err)\n    if (shouldBailoutToCSR) {\n      const stack = getStackWithoutErrorMessage(err)\n      error(\n        `${err.reason} should be wrapped in a suspense boundary at page \"${ctx.pagePath}\". Read more: https://nextjs.org/docs/messages/missing-suspense-with-csr-bailout\\n${stack}`\n      )\n\n      throw err\n    }\n\n    // If we errored when we did not have an RSC stream to read from. This is\n    // not just a render error, we need to throw early.\n    if (reactServerPrerenderResult === null) {\n      throw err\n    }\n\n    let errorType: 'not-found' | 'redirect' | undefined\n\n    if (isNotFoundError(err)) {\n      errorType = 'not-found'\n      res.statusCode = 404\n    } else if (isRedirectError(err)) {\n      errorType = 'redirect'\n      res.statusCode = getRedirectStatusCodeFromError(err)\n\n      const redirectUrl = addPathPrefix(\n        getURLFromRedirectError(err),\n        renderOpts.basePath\n      )\n\n      // If there were mutable cookies set, we need to set them on the\n      // response.\n      const headers = new Headers()\n      if (appendMutableCookies(headers, ctx.requestStore.mutableCookies)) {\n        setHeader('set-cookie', Array.from(headers.values()))\n      }\n\n      setHeader('location', redirectUrl)\n    } else if (!shouldBailoutToCSR) {\n      res.statusCode = 500\n    }\n\n    const [errorPreinitScripts, errorBootstrapScript] = getRequiredScripts(\n      renderOpts.buildManifest,\n      ctx.assetPrefix,\n      renderOpts.crossOrigin,\n      renderOpts.subresourceIntegrityManifest,\n      getAssetQueryString(ctx, false),\n      ctx.nonce,\n      '/_not-found/page'\n    )\n\n    const prerenderLegacyStore: PrerenderStore = (prerenderStore = {\n      type: 'prerender-legacy',\n      phase: 'render',\n      implicitTags: ctx.requestStore.implicitTags,\n      revalidate: INFINITE_CACHE,\n      tags: [...ctx.requestStore.implicitTags],\n    })\n    const errorRSCPayload = await workUnitAsyncStorage.run(\n      prerenderLegacyStore,\n      getErrorRSCPayload,\n      tree,\n      ctx,\n      errorType\n    )\n\n    const errorServerStream = workUnitAsyncStorage.run(\n      prerenderLegacyStore,\n      ComponentMod.renderToReadableStream,\n      errorRSCPayload,\n      clientReferenceManifest.clientModules,\n      {\n        onError: serverComponentsErrorHandler,\n      }\n    )\n\n    try {\n      const fizzStream = await renderToInitialFizzStream({\n        ReactDOMServer: require('react-dom/server.edge'),\n        element: (\n          <AppWithoutContext\n            reactServerStream={errorServerStream}\n            preinitScripts={errorPreinitScripts}\n            clientReferenceManifest={clientReferenceManifest}\n            nonce={ctx.nonce}\n          />\n        ),\n        streamOptions: {\n          nonce: ctx.nonce,\n          // Include hydration scripts in the HTML\n          bootstrapScripts: [errorBootstrapScript],\n          formState,\n        },\n      })\n\n      if (shouldGenerateStaticFlightData(workStore)) {\n        metadata.flightData = await streamToBuffer(\n          reactServerPrerenderResult.asStream()\n        )\n      }\n\n      const validateRootLayout = renderOpts.dev\n      return {\n        // Returning the error that was thrown so it can be used to handle\n        // the response in the caller.\n        digestErrorsMap: reactServerErrorsByDigest,\n        ssrErrors: allCapturedErrors,\n        stream: await continueFizzStream(fizzStream, {\n          inlinedDataStream: createInlinedDataReadableStream(\n            // This is intentionally using the readable datastream from the\n            // main render rather than the flight data from the error page\n            // render\n            reactServerPrerenderResult.consumeAsStream(),\n            ctx.nonce,\n            formState\n          ),\n          isStaticGeneration: true,\n          getServerInsertedHTML: makeGetServerInsertedHTML({\n            polyfills,\n            renderServerInsertedHTML,\n            serverCapturedErrors: [],\n            basePath: renderOpts.basePath,\n            tracingMetadata: tracingMetadata,\n          }),\n          serverInsertedHTMLToHead: true,\n          validateRootLayout,\n        }),\n        dynamicTracking: null,\n        collectedRevalidate:\n          prerenderStore !== null ? prerenderStore.revalidate : INFINITE_CACHE,\n        collectedTags: prerenderStore !== null ? prerenderStore.tags : null,\n      }\n    } catch (finalErr: any) {\n      if (process.env.NODE_ENV === 'development' && isNotFoundError(finalErr)) {\n        const bailOnNotFound: typeof import('../../client/components/dev-root-not-found-boundary').bailOnNotFound =\n          require('../../client/components/dev-root-not-found-boundary').bailOnNotFound\n        bailOnNotFound()\n      }\n      throw finalErr\n    }\n  }\n}\n\nconst loadingChunks: Set<Promise<unknown>> = new Set()\nconst chunkListeners: Array<(x?: unknown) => void> = []\n\nfunction trackChunkLoading(load: Promise<unknown>) {\n  loadingChunks.add(load)\n  load.finally(() => {\n    if (loadingChunks.has(load)) {\n      loadingChunks.delete(load)\n      if (loadingChunks.size === 0) {\n        // We are not currently loading any chunks. We can notify all listeners\n        for (let i = 0; i < chunkListeners.length; i++) {\n          chunkListeners[i]()\n        }\n        chunkListeners.length = 0\n      }\n    }\n  })\n}\n\nexport async function warmFlightResponse(\n  flightStream: ReadableStream<Uint8Array>,\n  clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n) {\n  let createFromReadableStream\n  if (process.env.TURBOPACK) {\n    createFromReadableStream =\n      // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-turbopack/client.edge').createFromReadableStream\n  } else {\n    createFromReadableStream =\n      // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge').createFromReadableStream\n  }\n\n  try {\n    createFromReadableStream(flightStream, {\n      ssrManifest: {\n        moduleLoading: clientReferenceManifest.moduleLoading,\n        moduleMap: clientReferenceManifest.ssrModuleMapping,\n      },\n    })\n  } catch {\n    // We don't want to handle errors here but we don't want it to\n    // interrupt the outer flow. We simply ignore it here and expect\n    // it will bubble up during a render\n  }\n\n  // We'll wait at least one task and then if no chunks have started to load\n  // we'll we can infer that there are none to load from this flight response\n  trackChunkLoading(waitAtLeastOneReactRenderTask())\n  return new Promise((r) => {\n    chunkListeners.push(r)\n  })\n}\n\nfunction isAbortReason(err: unknown, abortReason: Error): err is Error {\n  return err === abortReason\n}\n"],"names":["React","RenderResult","chainStreams","renderToInitialFizzStream","createDocumentClosingStream","continueFizzStream","continueDynamicPrerender","continueStaticPrerender","continueDynamicHTMLResume","streamToBuffer","streamToString","stripInternalQueries","NEXT_HMR_REFRESH_HEADER","NEXT_ROUTER_PREFETCH_HEADER","NEXT_ROUTER_STATE_TREE_HEADER","NEXT_URL","RSC_HEADER","createTrackedMetadataContext","createMetadataContext","withRequestStore","withWorkStore","isNotFoundError","getURLFromRedirectError","isRedirectError","getRedirectStatusCodeFromError","getImplicitTags","AppRenderSpan","NextNodeServerSpan","getTracer","FlightRenderResult","createFlightReactServerErrorHandler","createHTMLReactServerErrorHandler","createHTMLErrorHandler","isUserLandError","getShortDynamicParamType","dynamicParamTypes","getSegmentParam","getScriptNonceFromHeader","parseAndValidateFlightRouterState","createFlightRouterStateFromLoaderTree","handleAction","isBailoutToCSRError","warn","error","appendMutableCookies","createServerInsertedHTML","getRequiredScripts","addPathPrefix","makeGetServerInsertedHTML","walkTreeWithFlightRouterState","createComponentTree","getAssetQueryString","setReferenceManifestsSingleton","DynamicState","parsePostponedState","getDynamicDataPostponedState","getDynamicHTMLPostponedState","getPostponedFromState","isDynamicServerError","useFlightStream","createInlinedDataReadableStream","StaticGenBailoutError","isStaticGenBailoutError","getStackWithoutErrorMessage","accessedDynamicData","createPostponedAbortSignal","formatDynamicAPIAccesses","isPrerenderInterruptedError","isRenderInterruptedReason","createDynamicTrackingState","getFirstDynamicReason","trackAllowedDynamicAccess","throwIfDisallowedDynamic","getClientComponentLoaderMetrics","wrapClientComponentLoader","createServerModuleMap","isNodeNextRequest","parseParameter","parseRelativeUrl","AppRouter","getServerActionRequestMetadata","createInitialRouterState","createMutableActionQueue","getRevalidateReason","PAGE_SEGMENT_KEY","DynamicServerError","ReactServerResult","createReactServerPrerenderResult","createReactServerPrerenderResultFromRender","prerenderAndAbortInSequentialTasks","waitAtLeastOneReactRenderTask","workUnitAsyncStorage","CacheSignal","getTracedMetadata","INFINITE_CACHE","flightDataPathHeadKey","parseRequestHeaders","headers","options","isPrefetchRequest","toLowerCase","undefined","isHmrRefresh","isRSCRequest","shouldProvideFlightRouterState","isRoutePPREnabled","flightRouterState","csp","nonce","createNotFoundLoaderTree","loaderTree","components","children","page","makeGetDynamicParamFromSegment","params","pagePath","fallbackRouteParams","getDynamicParamFromSegment","segment","segmentParam","key","param","value","has","get","Array","isArray","map","i","encodeURIComponent","isCatchall","type","isOptionalCatchall","dynamicParamType","treeSegment","split","slice","flatMap","pathSegment","join","NonIndex","ctx","is404Page","isInvalidStatusCode","res","statusCode","meta","name","content","generateDynamicRSCPayload","requestStore","phase","flightData","componentMod","tree","createServerSearchParamsForMetadata","createServerParamsForMetadata","createMetadataComponents","MetadataBoundary","ViewportBoundary","appUsingSizeAdjustment","url","query","requestId","workStore","skipFlight","preloadCallbacks","searchParams","MetadataTree","getMetadataReady","metadataContext","pathname","renderOpts","createSegmentPath","child","loaderTreeToFilter","parentParams","isFirst","rscPayloadHead","Fragment","injectedCSS","Set","injectedJS","injectedFontPreloadTags","rootLayoutIncluded","path","actionResult","a","f","b","buildId","S","isStaticGeneration","createErrorContext","renderSource","routerKind","routePath","routeType","isAction","revalidateReason","generateDynamicFlightRenderResult","req","onFlightDataRenderError","err","onInstrumentationRequestError","onError","dev","rscPayload","flightReadableStream","renderToReadableStream","clientReferenceManifest","clientModules","fetchMetrics","prepareInitialCanonicalUrl","search","getRSCPayload","is404","missingSlots","process","env","NODE_ENV","GlobalError","initialTree","errorType","seedData","firstItem","varyHeader","getHeader","couldBeIntercepted","includes","initialHead","P","Preloads","p","assetPrefix","c","m","G","s","postponed","forEach","preloadFn","getErrorRSCPayload","initialSeedData","html","id","head","body","App","reactServerStream","preinitScripts","ServerInsertedHTMLProvider","response","use","initialState","initialFlightData","initialCanonicalUrlParts","initialParallelRoutes","location","prerendered","actionQueue","HeadManagerContext","require","Provider","appDir","globalErrorComponent","AppWithoutContext","renderToHTMLOrFlightImpl","parsedRequestHeaders","requestEndedState","postponedState","isNotFoundPath","requestTimestamp","Date","now","serverActionsManifest","ComponentMod","nextFontManifest","serverActions","enableTainting","__next_app__","instrumented","globalThis","__next_require__","__next_chunk_load__","args","loadingChunk","loadChunk","trackChunkLoading","URL","setAppIsrStatus","NEXT_RUNTIME","originalRequest","on","prerenderStore","getStore","isPPR","dynamicTracking","dynamicAccesses","length","usedDynamic","ended","metrics","reset","startSpan","clientComponentLoading","startTime","clientComponentLoadStart","attributes","clientComponentLoadCount","end","clientComponentLoadTimes","metadata","appUsingSizeAdjust","serverModuleMap","pageName","patchFetch","taintObjectReference","crypto","randomUUID","nanoid","isActionRequest","isServerAction","isPrefetch","setRootSpanAttribute","prerenderToStreamWithTracing","wrap","getBodyResult","spanName","prerenderToStream","isDebugDynamicAccesses","access","digestErrorsMap","size","buildFailingError","values","next","ssrErrors","find","pendingRevalidates","pendingRevalidateWrites","revalidatedTags","waitUntil","Promise","all","incrementalCache","revalidateTag","Object","collectedTags","fetchTags","forceStatic","collectedRevalidate","revalidate","staticBailoutInfo","description","dynamicUsageDescription","stack","dynamicUsageStack","stream","renderToStreamWithTracing","renderToStream","formState","actionRequestResult","generateFlight","notFoundLoaderTree","result","assignMetadata","renderToHTMLOrFlight","serverComponentsHmrCache","Error","experimental","implicitTags","routeModule","definition","workAsyncStorage","Boolean","renderServerInsertedHTML","tracingMetadata","getTracePropagationData","clientTraceMetadata","polyfills","buildManifest","polyfillFiles","filter","polyfill","endsWith","src","integrity","subresourceIntegrityManifest","crossOrigin","noModule","bootstrapScript","reactServerErrorsByDigest","Map","silenceLogger","onHTMLRenderRSCError","serverComponentsErrorHandler","nextExport","onHTMLRenderSSRError","allCapturedErrors","htmlRendererErrorHandler","reactServerResult","setHeader","bind","RSCPayload","DATA","inlinedReactServerDataStream","tee","resume","htmlStream","getServerInsertedHTML","serverCapturedErrors","basePath","inlinedDataStream","consume","onHeaders","maxHeadersLength","reactMaxHeadersLength","bootstrapScripts","isDebugStaticShell","generateStaticHTML","supportsDynamicResponse","validateRootLayout","serverInsertedHTMLToHead","message","shouldBailoutToCSR","reason","redirectUrl","Headers","mutableCookies","from","errorPreinitScripts","errorBootstrapScript","errorRSCPayload","errorServerStream","fizzStream","ReactDOMServer","element","streamOptions","finalErr","bailOnNotFound","shouldGenerateStaticFlightData","reactServerPrerenderResult","dynamicIO","PRERENDER_COMPLETE","abortReason","flightController","AbortController","cacheSignal","prospectiveRenderPrerenderStore","renderSignal","signal","controller","tags","reactServerIsDynamic","digest","firstAttemptRSCPayload","run","didError","prospectiveRenderError","prerender","onPostpone","catch","cacheReady","abort","finalRenderPrerenderStore","finalAttemptRSCPayload","warmFlightResponse","asStream","SSRController","ssrPrerenderStore","SSRIsDynamic","SSROnError","errorInfo","isAbortReason","componentStack","route","SSROnPostpone","prelude","asUnclosingStream","forceDynamic","foreverStream","ReadableStream","resumeStream","JSON","parse","stringify","consumeAsStream","cache","reactServerIsSynchronouslyDynamic","prospectiveStream","teedStream","rscForSSRStream","pendingHTMLStream","dynamicReason","console","reactServerPrerenderStore","prerenderLegacyStore","loadingChunks","chunkListeners","load","add","finally","delete","flightStream","createFromReadableStream","TURBOPACK","ssrManifest","moduleLoading","moduleMap","ssrModuleMapping","r","push"],"mappings":"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"}