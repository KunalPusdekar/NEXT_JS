{"version":3,"sources":["../../../src/server/app-render/dynamic-rendering.ts"],"sourcesContent":["/**\n * The functions provided by this module are used to communicate certain properties\n * about the currently running code so that Next.js can make decisions on how to handle\n * the current execution in different rendering modes such as pre-rendering, resuming, and SSR.\n *\n * Today Next.js treats all code as potentially static. Certain APIs may only make sense when dynamically rendering.\n * Traditionally this meant deopting the entire render to dynamic however with PPR we can now deopt parts\n * of a React tree as dynamic while still keeping other parts static. There are really two different kinds of\n * Dynamic indications.\n *\n * The first is simply an intention to be dynamic. unstable_noStore is an example of this where\n * the currently executing code simply declares that the current scope is dynamic but if you use it\n * inside unstable_cache it can still be cached. This type of indication can be removed if we ever\n * make the default dynamic to begin with because the only way you would ever be static is inside\n * a cache scope which this indication does not affect.\n *\n * The second is an indication that a dynamic data source was read. This is a stronger form of dynamic\n * because it means that it is inappropriate to cache this at all. using a dynamic data source inside\n * unstable_cache should error. If you want to use some dynamic data inside unstable_cache you should\n * read that data outside the cache and pass it in as an argument to the cached function.\n */\n\nimport type { WorkStore } from '../app-render/work-async-storage.external'\nimport type { WorkUnitStore } from '../app-render/work-unit-async-storage.external'\n\n// Once postpone is in stable we should switch to importing the postpone export directly\nimport React from 'react'\n\nimport { DynamicServerError } from '../../client/components/hooks-server-context'\nimport { StaticGenBailoutError } from '../../client/components/static-generation-bailout'\nimport {\n  workUnitAsyncStorage,\n  type PrerenderStoreLegacy,\n  type PrerenderStoreModern,\n} from './work-unit-async-storage.external'\nimport { workAsyncStorage } from '../app-render/work-async-storage.external'\nimport { makeHangingPromise } from '../dynamic-rendering-utils'\nimport {\n  METADATA_BOUNDARY_NAME,\n  VIEWPORT_BOUNDARY_NAME,\n  OUTLET_BOUNDARY_NAME,\n} from '../../lib/metadata/metadata-constants'\n\nconst hasPostpone = typeof React.unstable_postpone === 'function'\n\ntype DynamicAccess = {\n  /**\n   * If debugging, this will contain the stack trace of where the dynamic access\n   * occurred. This is used to provide more information to the user about why\n   * their page is being rendered dynamically.\n   */\n  stack?: string\n\n  /**\n   * The expression that was accessed dynamically.\n   */\n  expression: string\n}\n\n// Stores dynamic reasons used during a render.\nexport type DynamicTrackingState = {\n  /**\n   * When true, stack information will also be tracked during dynamic access.\n   */\n  readonly isDebugDynamicAccesses: boolean | undefined\n\n  /**\n   * The dynamic accesses that occurred during the render.\n   */\n  readonly dynamicAccesses: Array<DynamicAccess>\n\n  /**\n   * disallowedDynamic tracks information about what dynamic accesses\n   * were not properly scoped. These are prerender failures both at build\n   * and revalidate time.\n   */\n  readonly disallowedDynamic: {\n    hasSuspendedDynamic: boolean\n    hasDynamicMetadata: boolean\n    hasDynamicViewport: boolean\n    syncDynamicExpression: string\n    syncDynamicErrors: Array<Error>\n    dynamicErrors: Array<Error>\n  }\n}\n\nexport function createDynamicTrackingState(\n  isDebugDynamicAccesses: boolean | undefined\n): DynamicTrackingState {\n  return {\n    isDebugDynamicAccesses,\n    dynamicAccesses: [],\n    disallowedDynamic: {\n      hasSuspendedDynamic: false,\n      hasDynamicMetadata: false,\n      hasDynamicViewport: false,\n      syncDynamicExpression: '',\n      syncDynamicErrors: [],\n      dynamicErrors: [],\n    },\n  }\n}\n\nexport function getFirstDynamicReason(\n  trackingState: DynamicTrackingState\n): undefined | string {\n  return trackingState.dynamicAccesses[0]?.expression\n}\n\n/**\n * This function communicates that the current scope should be treated as dynamic.\n *\n * In most cases this function is a no-op but if called during\n * a PPR prerender it will postpone the current sub-tree and calling\n * it during a normal prerender will cause the entire prerender to abort\n */\nexport function markCurrentScopeAsDynamic(\n  store: WorkStore,\n  workUnitStore: undefined | WorkUnitStore,\n  expression: string\n): void {\n  if (workUnitStore) {\n    if (\n      workUnitStore.type === 'cache' ||\n      workUnitStore.type === 'unstable-cache'\n    ) {\n      // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope\n      // creates a cache boundary. This is subtly different from reading a dynamic data source which is\n      // forbidden inside a cache scope.\n      return\n    }\n  }\n\n  // If we're forcing dynamic rendering or we're forcing static rendering, we\n  // don't need to do anything here because the entire page is already dynamic\n  // or it's static and it should not throw or postpone here.\n  if (store.forceDynamic || store.forceStatic) return\n\n  if (store.dynamicShouldError) {\n    throw new StaticGenBailoutError(\n      `Route ${store.route} with \\`dynamic = \"error\"\\` couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n    )\n  }\n\n  if (workUnitStore) {\n    if (workUnitStore.type === 'prerender') {\n      // We're prerendering the RSC stream with dynamicIO enabled and we need to abort the\n      // current render because something dynamic is being used.\n      // This won't throw so we still need to fall through to determine if/how we handle\n      // this specific dynamic request.\n      abortAndThrowOnSynchronousDynamicDataAccess(\n        store.route,\n        expression,\n        workUnitStore\n      )\n    } else if (workUnitStore.type === 'prerender-ppr') {\n      postponeWithTracking(\n        store.route,\n        expression,\n        workUnitStore.dynamicTracking\n      )\n    } else if (workUnitStore.type === 'prerender-legacy') {\n      workUnitStore.revalidate = 0\n\n      // We aren't prerendering but we are generating a static page. We need to bail out of static generation\n      const err = new DynamicServerError(\n        `Route ${store.route} couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n      )\n      store.dynamicUsageDescription = expression\n      store.dynamicUsageStack = err.stack\n\n      throw err\n    } else if (\n      process.env.NODE_ENV === 'development' &&\n      workUnitStore &&\n      workUnitStore.type === 'request'\n    ) {\n      workUnitStore.usedDynamic = true\n    }\n  }\n}\n\n/**\n * This function communicates that some dynamic path parameter was read. This\n * differs from the more general `trackDynamicDataAccessed` in that it is will\n * not error when `dynamic = \"error\"` is set.\n *\n * @param store The static generation store\n * @param expression The expression that was accessed dynamically\n */\nexport function trackFallbackParamAccessed(\n  store: WorkStore,\n  expression: string\n): void {\n  const prerenderStore = workUnitAsyncStorage.getStore()\n  if (!prerenderStore || prerenderStore.type !== 'prerender-ppr') return\n\n  postponeWithTracking(store.route, expression, prerenderStore.dynamicTracking)\n}\n\n/**\n * This function communicates that some dynamic data was read. This typically would refer to accessing\n * a Request specific data store such as cookies or headers. This function is not how end-users will\n * describe reading from dynamic data sources which are valid to cache and up to the author to make\n * a determination of when to do so.\n *\n * If we are inside a cache scope we error\n * Also during a PPR Prerender we postpone\n */\nexport function trackDynamicDataAccessed(\n  store: WorkStore,\n  workUnitStore: undefined | WorkUnitStore,\n  expression: string\n): void {\n  if (workUnitStore) {\n    if (workUnitStore.type === 'cache') {\n      throw new Error(\n        `Route ${store.route} used \"${expression}\" inside \"use cache\". Accessing Dynamic data sources inside a cache scope is not supported. If you need this data inside a cached function use \"${expression}\" outside of the cached function and pass the required dynamic data in as an argument. See more info here: https://nextjs.org/docs/messages/next-request-in-use-cache`\n      )\n    } else if (workUnitStore.type === 'unstable-cache') {\n      throw new Error(\n        `Route ${store.route} used \"${expression}\" inside a function cached with \"unstable_cache(...)\". Accessing Dynamic data sources inside a cache scope is not supported. If you need this data inside a cached function use \"${expression}\" outside of the cached function and pass the required dynamic data in as an argument. See more info here: https://nextjs.org/docs/app/api-reference/functions/unstable_cache`\n      )\n    }\n  }\n\n  if (store.dynamicShouldError) {\n    throw new StaticGenBailoutError(\n      `Route ${store.route} with \\`dynamic = \"error\"\\` couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n    )\n  }\n\n  if (workUnitStore) {\n    if (workUnitStore.type === 'prerender') {\n      // dynamicIO Prerender\n      abortAndThrowOnSynchronousDynamicDataAccess(\n        store.route,\n        expression,\n        workUnitStore\n      )\n    } else if (workUnitStore.type === 'prerender-ppr') {\n      // PPR Prerender\n      postponeWithTracking(\n        store.route,\n        expression,\n        workUnitStore.dynamicTracking\n      )\n    } else if (workUnitStore.type === 'prerender-legacy') {\n      // legacy Prerender\n      workUnitStore.revalidate = 0\n\n      const err = new DynamicServerError(\n        `Route ${store.route} couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n      )\n      store.dynamicUsageDescription = expression\n      store.dynamicUsageStack = err.stack\n\n      throw err\n    } else if (\n      process.env.NODE_ENV === 'development' &&\n      workUnitStore &&\n      workUnitStore.type === 'request'\n    ) {\n      workUnitStore.usedDynamic = true\n    }\n  }\n}\n\n/**\n * This function is meant to be used when prerendering without dynamicIO or PPR.\n * When called during a build it will cause Next.js to consider the route as dynamic.\n *\n * @internal\n */\nexport function throwToInterruptStaticGeneration(\n  expression: string,\n  store: WorkStore,\n  prerenderStore: PrerenderStoreLegacy\n): never {\n  // We aren't prerendering but we are generating a static page. We need to bail out of static generation\n  const err = new DynamicServerError(\n    `Route ${store.route} couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n  )\n\n  prerenderStore.revalidate = 0\n\n  store.dynamicUsageDescription = expression\n  store.dynamicUsageStack = err.stack\n\n  throw err\n}\n\n/**\n * This function should be used to track whether something dynamic happened even when\n * we are in a dynamic render. This is useful for Dev where all renders are dynamic but\n * we still track whether dynamic APIs were accessed for helpful messaging\n *\n * @internal\n */\nexport function trackDynamicDataInDynamicRender(\n  _store: WorkStore,\n  workUnitStore: void | WorkUnitStore\n) {\n  if (workUnitStore) {\n    if (\n      workUnitStore.type === 'cache' ||\n      workUnitStore.type === 'unstable-cache'\n    ) {\n      // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope\n      // creates a cache boundary. This is subtly different from reading a dynamic data source which is\n      // forbidden inside a cache scope.\n      return\n    }\n    if (\n      workUnitStore.type === 'prerender' ||\n      workUnitStore.type === 'prerender-legacy'\n    ) {\n      workUnitStore.revalidate = 0\n    }\n    if (\n      process.env.NODE_ENV === 'development' &&\n      workUnitStore.type === 'request'\n    ) {\n      workUnitStore.usedDynamic = true\n    }\n  }\n}\n\n// Despite it's name we don't actually abort unless we have a controller to call abort on\n// There are times when we let a prerender run long to discover caches where we want the semantics\n// of tracking dynamic access without terminating the prerender early\nexport function abortOnSynchronousDynamicDataAccess(\n  route: string,\n  expression: string,\n  prerenderStore: PrerenderStoreModern\n): void {\n  if (prerenderStore.dynamicTracking) {\n    const disallowedDynamic = prerenderStore.dynamicTracking.disallowedDynamic\n    if (disallowedDynamic.syncDynamicExpression === '') {\n      disallowedDynamic.syncDynamicExpression = expression\n    }\n  }\n\n  const reason = `Route ${route} needs to bail out of prerendering at this point because it used ${expression}.`\n\n  const error = createPrerenderInterruptedError(reason)\n\n  if (prerenderStore.controller) {\n    prerenderStore.controller.abort(error)\n  }\n\n  const dynamicTracking = prerenderStore.dynamicTracking\n  if (dynamicTracking) {\n    dynamicTracking.dynamicAccesses.push({\n      // When we aren't debugging, we don't need to create another error for the\n      // stack trace.\n      stack: dynamicTracking.isDebugDynamicAccesses\n        ? new Error().stack\n        : undefined,\n      expression,\n    })\n  }\n}\n\n/**\n * use this function when prerendering with dynamicIO. If we are doing a\n * prospective prerender we don't actually abort because we want to discover\n * all caches for the shell. If this is the actual prerender we do abort.\n *\n * This function accepts a prerenderStore but the caller should ensure we're\n * actually running in dynamicIO mode.\n *\n *\n * @internal\n */\nexport function abortAndThrowOnSynchronousDynamicDataAccess(\n  route: string,\n  expression: string,\n  prerenderStore: PrerenderStoreModern\n): never {\n  abortOnSynchronousDynamicDataAccess(route, expression, prerenderStore)\n  throw createPrerenderInterruptedError(\n    `Route ${route} needs to bail out of prerendering at this point because it used ${expression}.`\n  )\n}\n\n/**\n * This component will call `React.postpone` that throws the postponed error.\n */\ntype PostponeProps = {\n  reason: string\n  route: string\n}\nexport function Postpone({ reason, route }: PostponeProps): never {\n  const prerenderStore = workUnitAsyncStorage.getStore()\n  const dynamicTracking =\n    prerenderStore && prerenderStore.type === 'prerender-ppr'\n      ? prerenderStore.dynamicTracking\n      : null\n  postponeWithTracking(route, reason, dynamicTracking)\n}\n\nexport function postponeWithTracking(\n  route: string,\n  expression: string,\n  dynamicTracking: null | DynamicTrackingState\n): never {\n  assertPostpone()\n  if (dynamicTracking) {\n    dynamicTracking.dynamicAccesses.push({\n      // When we aren't debugging, we don't need to create another error for the\n      // stack trace.\n      stack: dynamicTracking.isDebugDynamicAccesses\n        ? new Error().stack\n        : undefined,\n      expression,\n    })\n  }\n\n  React.unstable_postpone(createPostponeReason(route, expression))\n}\n\nfunction createPostponeReason(route: string, expression: string) {\n  return (\n    `Route ${route} needs to bail out of prerendering at this point because it used ${expression}. ` +\n    `React throws this special object to indicate where. It should not be caught by ` +\n    `your own try/catch. Learn more: https://nextjs.org/docs/messages/ppr-caught-error`\n  )\n}\n\nexport function isDynamicPostpone(err: unknown) {\n  if (\n    typeof err === 'object' &&\n    err !== null &&\n    typeof (err as any).message === 'string'\n  ) {\n    return isDynamicPostponeReason((err as any).message)\n  }\n  return false\n}\n\nfunction isDynamicPostponeReason(reason: string) {\n  return (\n    reason.includes(\n      'needs to bail out of prerendering at this point because it used'\n    ) &&\n    reason.includes(\n      'Learn more: https://nextjs.org/docs/messages/ppr-caught-error'\n    )\n  )\n}\n\nif (isDynamicPostponeReason(createPostponeReason('%%%', '^^^')) === false) {\n  throw new Error(\n    'Invariant: isDynamicPostpone misidentified a postpone reason. This is a bug in Next.js'\n  )\n}\n\nconst NEXT_PRERENDER_INTERRUPTED = 'NEXT_PRERENDER_INTERRUPTED'\n\nfunction createPrerenderInterruptedError(message: string): Error {\n  const error = new Error(message)\n  ;(error as any).digest = NEXT_PRERENDER_INTERRUPTED\n  return error\n}\n\ntype DigestError = Error & {\n  digest: string\n}\n\nexport function isPrerenderInterruptedError(\n  error: unknown\n): error is DigestError {\n  return (\n    typeof error === 'object' &&\n    error !== null &&\n    (error as any).digest === NEXT_PRERENDER_INTERRUPTED &&\n    'name' in error &&\n    'message' in error &&\n    error instanceof Error\n  )\n}\n\nexport function isRenderInterruptedReason(reason: string) {\n  return reason === NEXT_PRERENDER_INTERRUPTED\n}\n\nexport function accessedDynamicData(\n  dynamicTracking: DynamicTrackingState\n): boolean {\n  return dynamicTracking.dynamicAccesses.length > 0\n}\n\nexport function formatDynamicAPIAccesses(\n  dynamicTracking: DynamicTrackingState\n): string[] {\n  return dynamicTracking.dynamicAccesses\n    .filter(\n      (access): access is Required<DynamicAccess> =>\n        typeof access.stack === 'string' && access.stack.length > 0\n    )\n    .map(({ expression, stack }) => {\n      stack = stack\n        .split('\\n')\n        // Remove the \"Error: \" prefix from the first line of the stack trace as\n        // well as the first 4 lines of the stack trace which is the distance\n        // from the user code and the `new Error().stack` call.\n        .slice(4)\n        .filter((line) => {\n          // Exclude Next.js internals from the stack trace.\n          if (line.includes('node_modules/next/')) {\n            return false\n          }\n\n          // Exclude anonymous functions from the stack trace.\n          if (line.includes(' (<anonymous>)')) {\n            return false\n          }\n\n          // Exclude Node.js internals from the stack trace.\n          if (line.includes(' (node:')) {\n            return false\n          }\n\n          return true\n        })\n        .join('\\n')\n      return `Dynamic API Usage Debug - ${expression}:\\n${stack}`\n    })\n}\n\nfunction assertPostpone() {\n  if (!hasPostpone) {\n    throw new Error(\n      `Invariant: React.unstable_postpone is not defined. This suggests the wrong version of React was loaded. This is a bug in Next.js`\n    )\n  }\n}\n\n/**\n * This is a bit of a hack to allow us to abort a render using a Postpone instance instead of an Error which changes React's\n * abort semantics slightly.\n */\nexport function createPostponedAbortSignal(reason: string): AbortSignal {\n  assertPostpone()\n  const controller = new AbortController()\n  // We get our hands on a postpone instance by calling postpone and catching the throw\n  try {\n    React.unstable_postpone(reason)\n  } catch (x: unknown) {\n    controller.abort(x)\n  }\n  return controller.signal\n}\n\nexport function annotateDynamicAccess(\n  expression: string,\n  prerenderStore: PrerenderStoreModern\n) {\n  const dynamicTracking = prerenderStore.dynamicTracking\n  if (dynamicTracking) {\n    dynamicTracking.dynamicAccesses.push({\n      stack: dynamicTracking.isDebugDynamicAccesses\n        ? new Error().stack\n        : undefined,\n      expression,\n    })\n  }\n}\n\nexport function useDynamicRouteParams(expression: string) {\n  if (typeof window === 'undefined') {\n    const workStore = workAsyncStorage.getStore()\n\n    if (\n      workStore &&\n      workStore.isStaticGeneration &&\n      workStore.fallbackRouteParams &&\n      workStore.fallbackRouteParams.size > 0\n    ) {\n      // There are fallback route params, we should track these as dynamic\n      // accesses.\n      const workUnitStore = workUnitAsyncStorage.getStore()\n      if (workUnitStore) {\n        // We're prerendering with dynamicIO or PPR or both\n        if (workUnitStore.type === 'prerender') {\n          // We are in a prerender with dynamicIO semantics\n          // We are going to hang here and never resolve. This will cause the currently\n          // rendering component to effectively be a dynamic hole\n          React.use(makeHangingPromise())\n        } else if (workUnitStore.type === 'prerender-ppr') {\n          // We're prerendering with PPR\n          postponeWithTracking(\n            workStore.route,\n            expression,\n            workUnitStore.dynamicTracking\n          )\n        } else if (workUnitStore.type === 'prerender-legacy') {\n          throwToInterruptStaticGeneration(expression, workStore, workUnitStore)\n        }\n      }\n    }\n  }\n}\n\nconst hasSuspenseRegex = /\\n\\s+at Suspense \\(<anonymous>\\)/\nconst hasMetadataRegex = new RegExp(\n  `\\\\n\\\\s+at ${METADATA_BOUNDARY_NAME}[\\\\n\\\\s]`\n)\nconst hasViewportRegex = new RegExp(\n  `\\\\n\\\\s+at ${VIEWPORT_BOUNDARY_NAME}[\\\\n\\\\s]`\n)\nconst hasOutletRegex = new RegExp(`\\\\n\\\\s+at ${OUTLET_BOUNDARY_NAME}[\\\\n\\\\s]`)\n\nexport function trackAllowedDynamicAccess(\n  route: string,\n  thrownValue: Error,\n  componentStack: string,\n  dynamicTracking: DynamicTrackingState\n) {\n  const disallowedDynamic = dynamicTracking.disallowedDynamic\n  if (hasSuspenseRegex.test(componentStack)) {\n    disallowedDynamic.hasSuspendedDynamic = true\n    return\n  } else if (hasOutletRegex.test(componentStack)) {\n    // We don't need to track that this is dynamic. It is only so when something else is also dynamic.\n    return\n  } else if (hasMetadataRegex.test(componentStack)) {\n    //\n    disallowedDynamic.hasDynamicMetadata = true\n    return\n  } else if (hasViewportRegex.test(componentStack)) {\n    disallowedDynamic.hasDynamicViewport = true\n    return\n  } else if (isPrerenderInterruptedError(thrownValue)) {\n    const syncDynamicExpression = disallowedDynamic.syncDynamicExpression\n    let message: string\n    if (syncDynamicExpression) {\n      message = `Route ${route} used a synchronous Dynamic API: ${syncDynamicExpression}, which caused this component to not finish rendering before the prerender completed and no fallback UI was defined.`\n    } else {\n      message = `Route ${route} used a synchronous Dynamic API which caused this component to not finish rendering before the prerender completed and no fallback UI was defined.`\n    }\n    const error = createErrorWithComponentStack(message, componentStack)\n    disallowedDynamic.syncDynamicErrors.push(error)\n    return\n  } else if (disallowedDynamic.syncDynamicExpression) {\n    const message = `Route ${route} used a synchronous Dynamic API: ${disallowedDynamic.syncDynamicExpression}. This particular component may have been dynamic anyway or it may have just not finished before the synchronous Dynamic API was invoked.`\n    const error = createErrorWithComponentStack(message, componentStack)\n    disallowedDynamic.syncDynamicErrors.push(error)\n    return\n  } else {\n    // The thrownValue must have been the RENDER_COMPLETE abortReason because the only kinds of errors tracked here are\n    // interrupts or render completes\n    const message = `Route ${route} performed an IO operation that was not cached and no Suspense boundary was found to define a fallback UI.`\n    const error = createErrorWithComponentStack(message, componentStack)\n    disallowedDynamic.dynamicErrors.push(error)\n    return\n  }\n}\n\nfunction createErrorWithComponentStack(\n  message: string,\n  componentStack: string\n) {\n  const error = new Error(message)\n  error.stack = 'Error: ' + message + componentStack\n  return error\n}\n\nexport function throwIfDisallowedDynamic(\n  workStore: WorkStore,\n  dynamicTracking: DynamicTrackingState\n): void {\n  const disallowedDynamic = dynamicTracking.disallowedDynamic\n  const syncDynamicErrors = disallowedDynamic.syncDynamicErrors\n  if (syncDynamicErrors.length) {\n    for (let i = 0; i < syncDynamicErrors.length; i++) {\n      console.error(syncDynamicErrors[i])\n    }\n    const expression =\n      disallowedDynamic.syncDynamicExpression || 'a synchronous Dynamic API'\n    throw new StaticGenBailoutError(\n      `Route ${workStore.route} used ${expression} while prerendering which caused some part of the page to be dynamic without a Suspense boundary above it defining a fallback UI. It is best to avoid synchronous Dynamic API access during prerendering.`\n    )\n  }\n\n  const dynamicErrors = disallowedDynamic.dynamicErrors\n  if (dynamicErrors.length) {\n    for (let i = 0; i < dynamicErrors.length; i++) {\n      console.error(dynamicErrors[i])\n    }\n    throw new StaticGenBailoutError(\n      `Route ${workStore.route} has one or more dynamic components without a defined fallback UI. Render dynamic components inside a Suspense boundary to indicate what the appropriate fallback UI should be.`\n    )\n  }\n\n  if (!disallowedDynamic.hasSuspendedDynamic) {\n    if (disallowedDynamic.hasDynamicMetadata) {\n      if (disallowedDynamic.syncDynamicExpression) {\n        throw new StaticGenBailoutError(\n          `Route ${workStore.route} used ${disallowedDynamic.syncDynamicExpression} before Next.js could finish rendering metadata.`\n        )\n      }\n      throw new StaticGenBailoutError(\n        `Route ${workStore.route} has a dynamic \\`generateMetadata\\` but nothing else is dynamic. Try updating your \\`generateMetadata\\` to use cached data or ensure your route has at least one dynamic component in the a Page or Layout.`\n      )\n    } else if (disallowedDynamic.hasDynamicViewport) {\n      if (disallowedDynamic.syncDynamicExpression) {\n        throw new StaticGenBailoutError(\n          `Route ${workStore.route} used ${disallowedDynamic.syncDynamicExpression} before Next.js could finish rendering viewport.`\n        )\n      }\n      throw new StaticGenBailoutError(\n        `Route ${workStore.route} has a dynamic \\`generateViewport\\` but nothing else is dynamic. Try updating your \\`generateViewport\\` to use cached data or ensure your route has at least one dynamic component in the a Page or Layout.`\n      )\n    }\n  }\n}\n"],"names":["React","DynamicServerError","StaticGenBailoutError","workUnitAsyncStorage","workAsyncStorage","makeHangingPromise","METADATA_BOUNDARY_NAME","VIEWPORT_BOUNDARY_NAME","OUTLET_BOUNDARY_NAME","hasPostpone","unstable_postpone","createDynamicTrackingState","isDebugDynamicAccesses","dynamicAccesses","disallowedDynamic","hasSuspendedDynamic","hasDynamicMetadata","hasDynamicViewport","syncDynamicExpression","syncDynamicErrors","dynamicErrors","getFirstDynamicReason","trackingState","expression","markCurrentScopeAsDynamic","store","workUnitStore","type","forceDynamic","forceStatic","dynamicShouldError","route","abortAndThrowOnSynchronousDynamicDataAccess","postponeWithTracking","dynamicTracking","revalidate","err","dynamicUsageDescription","dynamicUsageStack","stack","process","env","NODE_ENV","usedDynamic","trackFallbackParamAccessed","prerenderStore","getStore","trackDynamicDataAccessed","Error","throwToInterruptStaticGeneration","trackDynamicDataInDynamicRender","_store","abortOnSynchronousDynamicDataAccess","reason","error","createPrerenderInterruptedError","controller","abort","push","undefined","Postpone","assertPostpone","createPostponeReason","isDynamicPostpone","message","isDynamicPostponeReason","includes","NEXT_PRERENDER_INTERRUPTED","digest","isPrerenderInterruptedError","isRenderInterruptedReason","accessedDynamicData","length","formatDynamicAPIAccesses","filter","access","map","split","slice","line","join","createPostponedAbortSignal","AbortController","x","signal","annotateDynamicAccess","useDynamicRouteParams","window","workStore","isStaticGeneration","fallbackRouteParams","size","use","hasSuspenseRegex","hasMetadataRegex","RegExp","hasViewportRegex","hasOutletRegex","trackAllowedDynamicAccess","thrownValue","componentStack","test","createErrorWithComponentStack","throwIfDisallowedDynamic","i","console"],"mappings":"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"}