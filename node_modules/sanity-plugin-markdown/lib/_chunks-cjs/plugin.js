"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
));
var sanity = require("sanity"), jsxRuntime = require("react/jsx-runtime"), react = require("react"), ui = require("@sanity/ui"), styledComponents = require("styled-components");
const MarkdownInputStyles = styledComponents.styled(ui.Box)`
  & .CodeMirror.CodeMirror {
    color: ${({ theme }) => theme.sanity.color.card.enabled.fg};
    border-color: ${({ theme }) => theme.sanity.color.card.enabled.border};
    background-color: inherit;
  }

  & .cm-s-easymde .CodeMirror-cursor {
    border-color: ${({ theme }) => theme.sanity.color.card.enabled.fg};
  }

  & .editor-toolbar,
  .editor-preview-side {
    border-color: ${({ theme }) => theme.sanity.color.card.enabled.border};
  }

  & .CodeMirror-focused .CodeMirror-selected.CodeMirror-selected.CodeMirror-selected {
    background-color: ${({ theme }) => theme.sanity.color.selectable?.primary?.hovered?.bg};
  }

  & .CodeMirror-selected.CodeMirror-selected.CodeMirror-selected {
    background-color: ${({ theme }) => theme.sanity.color.card.enabled.bg};
  }

  & .editor-toolbar > * {
    color: ${({ theme }) => theme.sanity.color.card.enabled.fg};
  }

  & .editor-toolbar > .active,
  .editor-toolbar > button:hover,
  .editor-preview pre,
  .cm-s-easymde .cm-comment {
    background-color: ${({ theme }) => theme.sanity.color.card.enabled.bg};
  }

  & .editor-preview {
    background-color: ${({ theme }) => theme.sanity.color.card.enabled.bg};

    & h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      font-size: revert;
    }

    & ul,
    li {
      list-style: revert;
      padding: revert;
    }

    & a {
      text-decoration: revert;
    }
  }
`, SimpleMdeReact = react.lazy(() => import("react-simplemde-editor")), defaultMdeTools = [
  "heading",
  "bold",
  "italic",
  "|",
  "quote",
  "unordered-list",
  "ordered-list",
  "|",
  "link",
  "image",
  "code",
  "|",
  "preview",
  "side-by-side"
];
function MarkdownInput(props) {
  const {
    value = "",
    onChange,
    elementProps: { onBlur, onFocus, ref },
    reactMdeProps: { options: mdeCustomOptions, ...reactMdeProps } = {},
    schemaType
  } = props, client = sanity.useClient({ apiVersion: "2022-01-01" }), { imageUrl } = schemaType.options ?? {}, imageUpload = react.useCallback(
    (file, onSuccess, onError) => {
      client.assets.upload("image", file).then((doc) => onSuccess(imageUrl ? imageUrl(doc) : `${doc.url}?w=450`)).catch((e) => {
        console.error(e), onError(e.message);
      });
    },
    [client, imageUrl]
  ), mdeOptions = react.useMemo(() => ({
    autofocus: !1,
    spellChecker: !1,
    sideBySideFullscreen: !1,
    uploadImage: !0,
    imageUploadFunction: imageUpload,
    toolbar: defaultMdeTools,
    status: !1,
    ...mdeCustomOptions
  }), [imageUpload, mdeCustomOptions]), handleChange = react.useCallback(
    (newValue) => {
      onChange(sanity.PatchEvent.from(newValue ? sanity.set(newValue) : sanity.unset()));
    },
    [onChange]
  );
  return react.useSyncExternalStore(
    noop,
    () => !0,
    () => !1
  ) ? /* @__PURE__ */ jsxRuntime.jsx(MarkdownInputStyles, { children: /* @__PURE__ */ jsxRuntime.jsx(react.Suspense, { fallback, children: /* @__PURE__ */ jsxRuntime.jsx(
    SimpleMdeReact,
    {
      ...reactMdeProps,
      ref,
      value,
      onChange: handleChange,
      onBlur,
      onFocus,
      options: mdeOptions,
      spellCheck: !1
    }
  ) }) }) : /* @__PURE__ */ jsxRuntime.jsx(MarkdownInputStyles, { children: fallback });
}
const noop = () => () => {
}, fallback = /* @__PURE__ */ jsxRuntime.jsx(ui.Box, { padding: 3, children: /* @__PURE__ */ jsxRuntime.jsx(ui.Text, { children: "Loading editor..." }) }), markdownTypeName = "markdown", markdownSchemaType = sanity.defineType({
  type: "string",
  name: markdownTypeName,
  title: "Markdown",
  components: { input: MarkdownInput }
}), markdownSchema = sanity.definePlugin((config) => ({
  name: "markdown-editor",
  schema: {
    types: [
      config && config.input ? { ...markdownSchemaType, components: { input: config.input } } : markdownSchemaType
    ]
  }
}));
exports.MarkdownInput = MarkdownInput;
exports.defaultMdeTools = defaultMdeTools;
exports.markdownSchema = markdownSchema;
exports.markdownSchemaType = markdownSchemaType;
//# sourceMappingURL=plugin.js.map
