import { useClient, PatchEvent, set, unset, defineType, definePlugin } from "sanity";
import { jsx } from "react/jsx-runtime";
import { lazy, useCallback, useMemo, useSyncExternalStore, Suspense } from "react";
import { Box, Text } from "@sanity/ui";
import { styled } from "styled-components";
const MarkdownInputStyles = styled(Box)`
  & .CodeMirror.CodeMirror {
    color: ${({ theme }) => theme.sanity.color.card.enabled.fg};
    border-color: ${({ theme }) => theme.sanity.color.card.enabled.border};
    background-color: inherit;
  }

  & .cm-s-easymde .CodeMirror-cursor {
    border-color: ${({ theme }) => theme.sanity.color.card.enabled.fg};
  }

  & .editor-toolbar,
  .editor-preview-side {
    border-color: ${({ theme }) => theme.sanity.color.card.enabled.border};
  }

  & .CodeMirror-focused .CodeMirror-selected.CodeMirror-selected.CodeMirror-selected {
    background-color: ${({ theme }) => theme.sanity.color.selectable?.primary?.hovered?.bg};
  }

  & .CodeMirror-selected.CodeMirror-selected.CodeMirror-selected {
    background-color: ${({ theme }) => theme.sanity.color.card.enabled.bg};
  }

  & .editor-toolbar > * {
    color: ${({ theme }) => theme.sanity.color.card.enabled.fg};
  }

  & .editor-toolbar > .active,
  .editor-toolbar > button:hover,
  .editor-preview pre,
  .cm-s-easymde .cm-comment {
    background-color: ${({ theme }) => theme.sanity.color.card.enabled.bg};
  }

  & .editor-preview {
    background-color: ${({ theme }) => theme.sanity.color.card.enabled.bg};

    & h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      font-size: revert;
    }

    & ul,
    li {
      list-style: revert;
      padding: revert;
    }

    & a {
      text-decoration: revert;
    }
  }
`, SimpleMdeReact = lazy(() => import("react-simplemde-editor")), defaultMdeTools = [
  "heading",
  "bold",
  "italic",
  "|",
  "quote",
  "unordered-list",
  "ordered-list",
  "|",
  "link",
  "image",
  "code",
  "|",
  "preview",
  "side-by-side"
];
function MarkdownInput(props) {
  const {
    value = "",
    onChange,
    elementProps: { onBlur, onFocus, ref },
    reactMdeProps: { options: mdeCustomOptions, ...reactMdeProps } = {},
    schemaType
  } = props, client = useClient({ apiVersion: "2022-01-01" }), { imageUrl } = schemaType.options ?? {}, imageUpload = useCallback(
    (file, onSuccess, onError) => {
      client.assets.upload("image", file).then((doc) => onSuccess(imageUrl ? imageUrl(doc) : `${doc.url}?w=450`)).catch((e) => {
        console.error(e), onError(e.message);
      });
    },
    [client, imageUrl]
  ), mdeOptions = useMemo(() => ({
    autofocus: !1,
    spellChecker: !1,
    sideBySideFullscreen: !1,
    uploadImage: !0,
    imageUploadFunction: imageUpload,
    toolbar: defaultMdeTools,
    status: !1,
    ...mdeCustomOptions
  }), [imageUpload, mdeCustomOptions]), handleChange = useCallback(
    (newValue) => {
      onChange(PatchEvent.from(newValue ? set(newValue) : unset()));
    },
    [onChange]
  );
  return useSyncExternalStore(
    noop,
    () => !0,
    () => !1
  ) ? /* @__PURE__ */ jsx(MarkdownInputStyles, { children: /* @__PURE__ */ jsx(Suspense, { fallback, children: /* @__PURE__ */ jsx(
    SimpleMdeReact,
    {
      ...reactMdeProps,
      ref,
      value,
      onChange: handleChange,
      onBlur,
      onFocus,
      options: mdeOptions,
      spellCheck: !1
    }
  ) }) }) : /* @__PURE__ */ jsx(MarkdownInputStyles, { children: fallback });
}
const noop = () => () => {
}, fallback = /* @__PURE__ */ jsx(Box, { padding: 3, children: /* @__PURE__ */ jsx(Text, { children: "Loading editor..." }) }), markdownTypeName = "markdown", markdownSchemaType = defineType({
  type: "string",
  name: markdownTypeName,
  title: "Markdown",
  components: { input: MarkdownInput }
}), markdownSchema = definePlugin((config) => ({
  name: "markdown-editor",
  schema: {
    types: [
      config && config.input ? { ...markdownSchemaType, components: { input: config.input } } : markdownSchemaType
    ]
  }
}));
export {
  MarkdownInput,
  defaultMdeTools,
  markdownSchema,
  markdownSchemaType
};
//# sourceMappingURL=plugin.mjs.map
